/*
 * Copyright (C) 2001-2011 Ideaworks3D Ltd.
 * All Rights Reserved.
 *
 * This document is protected by copyright, and contains information
 * proprietary to Ideaworks Labs.
 * This file consists of source code released by Ideaworks Labs under
 * the terms of the accompanying End User License Agreement (EULA).
 * Please do not use this program/source code before you have read the
 * EULA and have agreed to be bound by its terms.
 */
/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
#ifndef S3E_EXT_TAPJOY_H
#define S3E_EXT_TAPJOY_H

typedef enum s3eTapjoyError
{
	// Generic error codes (s3e convention)
	TAPJOY_ERROR_NONE				= 0,  // No Error.
    TAPJOY_ERROR_PARAM				= 1,  // Invalid parameter.
    TAPJOY_ERROR_TOO_MANY			= 2,  // Maximum number of callbacks exceeded.
    TAPJOY_ERROR_ALREADY			= 3,  // The specified callback is already registered 
    TAPJOY_ERROR_NOT_FOUND			= 4,  // The specified callback was not found for removal 
    TAPJOY_ERROR_UNAVAIL			= 5,  // Feature/function is unavailable on this device/platform. 
    TAPJOY_ERROR_DEVICE				= 6,  // The underlying system-specific device failed 
    TAPJOY_ERROR_UNSUPPORTED		= 7,  // This implementation of s3e does not support this feature 
    TAPJOY_ERROR_MEM				= 8,  // Out of memory performing operation 
    TAPJOY_ERROR_UNKNOWN			= 9,  // Unknown error 
    TAPJOY_ERROR_INVALID_DRIVE		= 10, // Invalid/unsupported drive specified in path 
    TAPJOY_ERROR_INVALID_PATH		= 11, // The specified path is not valid (e.g. opening /../file) 
    TAPJOY_ERROR_DATA				= 12, // Data read/write error 
    TAPJOY_ERROR_ACCESS				= 13, // Access denied or insufficient permissions for operation. 
    TAPJOY_ERROR_STATE				= 14, // The system could not perform the desired action becasue it is in the wrong 

    // TapJoy specific error codes
    TAPJOY_ERROR_CONNECT			= 1000,
} s3eTapjoyError;

typedef enum s3eTapjoyCallback
{
	S3E_TAPJOY_CALLBACK_CONNECT_RESULT,				// Callback fired when TapjoyConnect succeeds or fails (only available on iOS?)
	S3E_TAPJOY_CALLBACK_GET_TAP_POINTS,
	S3E_TAPJOY_CALLBACK_SPEND_TAP_POINTS,
	S3E_TAPJOY_CALLBACK_AWARD_TAP_POINTS,
	S3E_TAPJOY_CALLBACK_GET_FEATURED_APP,
	S3E_TAPJOY_CALLBACK_VG_ITEM_DOWNLOAD_COMPLETE,	// Callback fired when a virtual good (that has previously not been downloaded) has finished downloading.
	S3E_TAPJOY_CALLBACK_VG_ITEM_PURCHASE_COMPLETE,	// Callback fired when any virtual good has been purchased.

    S3E_TAPJOY_CALLBACK_MAX
} s3eTapjoyCallback;

typedef int32 (*TapjoyGenericCB)(void* instance, void* systemData, void* userData);

typedef struct TapjoyGetTapPointsResult
{
	s3eTapjoyError		m_Error;
	const char*		m_ErrorString;

	const char*		m_CurrencyName;
	int				m_PointTotal;

} TapjoyGetTapPointsResult;

typedef int32 (*TapjoyGetTapPointsCallbackFn)(TapjoyGetTapPointsResult* result, void* userData);

typedef struct TapjoySpendTapPointsResult
{
	s3eTapjoyError		m_Error;
	const char*		m_ErrorString;

	const char*		m_CurrencyName;
	int				m_PointTotal;

} TapjoySpendTapPointsResult;

typedef int32 (*TapjoySpendTapPointsCallbackFn)(TapjoySpendTapPointsResult* result, void* userData);


typedef struct TapjoyAwardTapPointsResult
{
	s3eTapjoyError		m_Error;
	const char*		m_ErrorString;

	const char*		m_CurrencyName;
	int				m_PointTotal;

} TapjoyAwardTapPointsResult;

typedef int32 (*TapjoyAwardTapPointsCallbackFn)(TapjoyAwardTapPointsResult* result, void* userData);

#define  TAPJOY_VG_STORE_ITEM_MAX_ITEMS				25
#define  TAPJOY_VG_STORE_ITEM_STORE_ITEM			0
#define  TAPJOY_VG_STORE_ITEM_PURCHASED_ITEM		1

typedef struct TapjoyImage
{
    void*           m_Data;				// Tightly packed ARGB Pixel data
    int				m_BitsPerPixel;		// Always 8
    int				m_Width;
    int				m_Height;
} TapjoyVGStoreImage;

typedef struct TapjoyVGStoreItem
{
	const char*		m_VGStoreItemID;
	const char*		m_ProductID;
	int				m_Price;
	const char*		m_Name;
	const char*		m_Description;
	const char*		m_VGStoreItemTypeName;
	int				m_NumberOwned;
	const char*		m_ThumbImageUrl;
	const char*		m_FullImageUrl;
	const char*		m_DatafileUrl;

	TapjoyImage*	m_ThumbImage;
	s3eBool			m_Shown;
} TapjoyVGStoreItem;

typedef struct TapjoyFeaturedAppObject
{
	const char*			m_Cost;
	const char*			m_StoreID;
	const char*			m_Name;
	const char*			m_Description;
	int					m_Amount;
	const char*			m_IconURL;
	const char*			m_RedirectURL;
	int					m_MaxTimesToDisplayThisApp;
	const char*			m_FullScreenAdURL;
} TapjoyFeaturedAppObject;

typedef struct TapjoyGetFeaturedAppResult
{
	s3eTapjoyError					m_Error;
	const char*					m_ErrorString;

	TapjoyFeaturedAppObject	m_FeaturedAppObject;
} TapjoyGetFeaturedAppResult;

typedef int32 (*TapjoyGetFeaturedAppCallbackFn)(TapjoyGetFeaturedAppResult* result, void* userData);

//typedef enum TJCTransitionEnum
//{
//	TransitionBottomToTop = 0,		/*!< View animates from the bottom to the top of the screen. */
//	TransitionTopToBottom = 1,		/*!< View animates from the top to the bottom of the screen. */
//	TransitionLeftToRight = 2,		/*!< View animates from the left to the right of the screen. */
//	TransitionRightToLeft = 3,		/*!< View animates from the right to the left of the screen. */
//	TransitionFadeEffect = 4,		/*!< View fades into visibility. */
//	TransitionNormalToBottom = 5,	/*!< View animates off screen downwards. */
//	TransitionNormalToTop = 6,		/*!< View animates off screen upwards. */
//	TransitionNormalToLeft = 7,		/*!< View animates off screen to the left. */
//	TransitionNormalToRight = 8,	/*!< View animates off screen to the right. */
//	TransitionFadeEffectReverse=9,	/*!< View fades out of visibility. */
//	TransitionNoEffect = -1			/*!< No animation effect. */
//} TJCTransitionEnum;

#define TJC_AD_BANNERSIZE_320X50	@"320x50"
#define TJC_AD_BANNERSIZE_480X32	@"480x32"

typedef struct TapjoyGetDisplayAdResult
{
	s3eTapjoyError					m_Error;
	const char*					m_ErrorString;
} TapjoyGetDisplayAdResult;

typedef int32 (*TapjoyGetDisplayAdCallbackFn)(TapjoyGetDisplayAdResult* result, void* userData);

S3E_BEGIN_C_DECL

/**
 * Returns S3E_TRUE if the Tapjoy extension is available.
 */
s3eBool s3eTapjoyAvailable();

/**
 * Registers a callback to be called for an operating system event.
 *
 * The available callback types are listed in @ref s3eTapjoyCallback.
 * @param cbid ID of the event for which to register.
 * @param fn callback function.
 * @param userdata Value to pass to the @e userdata parameter of @e NotifyFunc.
 * @return
 * <ul>
 *  <li>@ref S3E_RESULT_SUCCESS if no error occurred.
 *  <li>@ref S3E_RESULT_ERROR if the operation failed.\n
 *         Call s3eTapjoyGetError() to retrieve an error code.
 *         This will return one of:
 *  <ul>
 *      <li>@ref S3E_DEVICE_ERR_PARAM if @e cbid is not a valid member of @ref s3eTapjoyCallback or @e NotifyFunc is NULL.
 *      <li>@ref S3E_DEVICE_ERR_TOO_MANY If the maximum number of callbacks for this device has been exceeded.
 *      <li>@ref S3E_DEVICE_ERR_ALREADY_REG If (@e cbid, @e NotifyFunc) has already been registered.
 *  </ul>
 * </ul>
 * @see s3eTapjoyUnRegister
 * @note For more information on the system data passed as a parameter to the callback
 * registered using this function, see the @ref s3eTapjoyCallback enum.
 */
s3eResult s3eTapjoyRegister(s3eTapjoyCallback cbid, s3eCallback fn, void* userData);

/**
 * Unregister a callback for a given event.
 * @param cbid ID of the callback for which to register.
 * @param fn Callback Function.
 * @return
 * - @ref S3E_RESULT_SUCCESS if no error occurred.
 * - @ref S3E_RESULT_ERROR if the operation failed.\n
 *         Call s3eTapjoyGetError() to retrieve an error code.
 *         This will return one of:
 *   - @ref S3E_FILE_ERR_PARAM if @e cbid is not a valid member of @ref s3eTapjoyCallback.
 *   - @ref S3E_FILE_ERR_NOT_FOUND if @e fn is not registered for callback @e cbid.
 * @note For more information on the systemData passed as a parameter to the callback
 * registered using this function, see the s3eTapjoyCallback enum.
 * @note It is not necessary to define a return value for any registered callback.
 * @see s3eTapjoyRegister
 */
s3eResult s3eTapjoyUnRegister(s3eTapjoyCallback cbid, s3eCallback fn);

/**
 * Retrieves the last error as a string, if any, for this subdevice. This
 * function is only available in debug builds.
 * @see s3eTapjoyGetError
 *
 * @remark This function, as opposed to s3eTapjoyGetError(), will always
 * return the last error no matter how many times it is called. This function
 * should not be relied upon to indicate whether an error has just occurred.
 *
 * @par Required Header Files
 * s3eTapjoy.h
 */
const char* s3eTapjoyGetErrorString();

/**
 * Retrieves the last error, if any, for this subdevice.
 * @see s3eTapjoyGetErrorString
 *
 * @remark Calling this function will retrieve the last error and then remove
 * it from memory; therefore, any further calls to this function will not
 * return an error unless a subsequent error has occurred.
 *
 * @par Required Header Files
 * s3eTapjoy.h
 */
s3eTapjoyError s3eTapjoyGetError();

s3eResult TapjoyRequestConnect(const char* appID, const char* secretKey);

s3eResult TapjoyActionComplete(const char* actionID);

s3eResult TapjoySetUserID(const char* userID);

s3eResult TapjoyShowOffers();

s3eResult TapjoyShowOffersWithCurrenyID(const char* currencyID, s3eBool enableCurrencySelector);

s3eResult TapjoyGetTapPoints(TapjoyGetTapPointsCallbackFn callbackFn, void* userData);

s3eResult TapjoySpendTapPoints(int amount, TapjoySpendTapPointsCallbackFn callbackFn, void* userData);

s3eResult TapjoyAwardTapPoints(int amount, TapjoyAwardTapPointsCallbackFn callbackFn, void* userData);

s3eResult TapjoyShowVirtualGoods();

TapjoyVGStoreItem* TapjoyGetPurchasedItem(int index);

TapjoyVGStoreItem* TapjoyGetAvailableItem(int index);

s3eResult TapjoyGetFeaturedApp(TapjoyGetFeaturedAppCallbackFn callbackFn, void* userData);

s3eResult TapjoyShowFeaturedAppFullScreenAd();

s3eResult TapjoySetFeaturedAppDisplayCount(int count);

s3eResult TapjoySetTransitionEffect(int transition);

s3eResult TapjoySetOffersNavBarImage(const char* pPNGFilename);

s3eResult TapjoySetUserDefinedColor(int your_color_in_0xAAARRGGBB_format);

s3eResult TapjoyGetDisplayAd(const char* adContentSize, s3eBool shouldRefreshAd, TapjoyGetDisplayAdCallbackFn callbackFn, void* userData);

s3eResult TapjoySetDisplayAdView(int left, int top, int width, int height);

S3E_END_C_DECL


#endif /* !S3E_EXT_TAPJOY_H */
