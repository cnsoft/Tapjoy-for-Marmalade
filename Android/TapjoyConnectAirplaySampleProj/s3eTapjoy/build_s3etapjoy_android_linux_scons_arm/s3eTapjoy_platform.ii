# 1 "C:\\users\\rlezama\\desktop\\airplay\\tapjoyconnectairplaysampleproj\\s3etapjoy\\source\\android\\s3eTapjoy_platform.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "./temp_defines_release.h" 1
# 1 "<command-line>" 2
# 1 "C:\\users\\rlezama\\desktop\\airplay\\tapjoyconnectairplaysampleproj\\s3etapjoy\\source\\android\\s3eTapjoy_platform.cpp"
# 10 "C:\\users\\rlezama\\desktop\\airplay\\tapjoyconnectairplaysampleproj\\s3etapjoy\\source\\android\\s3eTapjoy_platform.cpp"
# 1 "../source/h/s3eTapjoy_internal.h" 1
# 18 "../source/h/s3eTapjoy_internal.h"
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eTypes.h" 1
# 37 "../../../../../../../dev/sdk/5.0/s3e/h/s3eTypes.h"
typedef unsigned char s3e_uint8_t;
typedef signed char s3e_int8_t;
typedef unsigned short int s3e_uint16_t;
typedef signed short int s3e_int16_t;
typedef unsigned int s3e_uint32_t;
typedef signed int s3e_int32_t;
# 51 "../../../../../../../dev/sdk/5.0/s3e/h/s3eTypes.h"
  typedef signed long long s3e_int64_t;
  typedef unsigned long long s3e_uint64_t;
# 74 "../../../../../../../dev/sdk/5.0/s3e/h/s3eTypes.h"
typedef s3e_uint64_t uint64_t;
typedef s3e_int64_t int64_t;
typedef s3e_uint32_t uint32_t;
typedef s3e_int32_t int32_t;
typedef s3e_uint16_t uint16_t;
typedef s3e_int16_t int16_t;
typedef s3e_uint8_t uint8_t;
typedef s3e_int8_t int8_t;
# 96 "../../../../../../../dev/sdk/5.0/s3e/h/s3eTypes.h"
    typedef int intptr_t;
    typedef unsigned int uintptr_t;
# 108 "../../../../../../../dev/sdk/5.0/s3e/h/s3eTypes.h"
typedef unsigned int uint;
typedef unsigned short int ushort;
typedef unsigned long int ulong;
typedef unsigned char uint8;
typedef signed char int8;







typedef int64_t int64;
typedef uint64_t uint64;





typedef unsigned int uint32;






typedef signed int int32;






typedef uint16_t uint16;




typedef int16_t int16;
# 226 "../../../../../../../dev/sdk/5.0/s3e/h/s3eTypes.h"
typedef enum s3eResult
{
    S3E_RESULT_SUCCESS = 0,
    S3E_RESULT_ERROR = 1
} s3eResult;




typedef uint8 s3eBool;
# 246 "../../../../../../../dev/sdk/5.0/s3e/h/s3eTypes.h"
typedef unsigned short s3eWChar;
# 256 "../../../../../../../dev/sdk/5.0/s3e/h/s3eTypes.h"
typedef int32 (*s3eCallback) (void* systemData, void* userData);
# 19 "../source/h/s3eTapjoy_internal.h" 2
# 1 "../h/s3eTapjoy.h" 1
# 19 "../h/s3eTapjoy.h"
typedef enum s3eTapjoyError
{

 TAPJOY_ERROR_NONE = 0,
    TAPJOY_ERROR_PARAM = 1,
    TAPJOY_ERROR_TOO_MANY = 2,
    TAPJOY_ERROR_ALREADY = 3,
    TAPJOY_ERROR_NOT_FOUND = 4,
    TAPJOY_ERROR_UNAVAIL = 5,
    TAPJOY_ERROR_DEVICE = 6,
    TAPJOY_ERROR_UNSUPPORTED = 7,
    TAPJOY_ERROR_MEM = 8,
    TAPJOY_ERROR_UNKNOWN = 9,
    TAPJOY_ERROR_INVALID_DRIVE = 10,
    TAPJOY_ERROR_INVALID_PATH = 11,
    TAPJOY_ERROR_DATA = 12,
    TAPJOY_ERROR_ACCESS = 13,
    TAPJOY_ERROR_STATE = 14,


    TAPJOY_ERROR_CONNECT = 1000,
} s3eTapjoyError;

typedef enum s3eTapjoyCallback
{
 S3E_TAPJOY_CALLBACK_CONNECT_RESULT,
 S3E_TAPJOY_CALLBACK_GET_TAP_POINTS,
 S3E_TAPJOY_CALLBACK_SPEND_TAP_POINTS,
 S3E_TAPJOY_CALLBACK_AWARD_TAP_POINTS,
 S3E_TAPJOY_CALLBACK_GET_FEATURED_APP,
 S3E_TAPJOY_CALLBACK_VG_ITEM_DOWNLOAD_COMPLETE,
 S3E_TAPJOY_CALLBACK_VG_ITEM_PURCHASE_COMPLETE,

    S3E_TAPJOY_CALLBACK_MAX
} s3eTapjoyCallback;

typedef int32 (*TapjoyGenericCB)(void* instance, void* systemData, void* userData);

typedef struct TapjoyGetTapPointsResult
{
 s3eTapjoyError m_Error;
 const char* m_ErrorString;

 const char* m_CurrencyName;
 int m_PointTotal;

} TapjoyGetTapPointsResult;

typedef int32 (*TapjoyGetTapPointsCallbackFn)(TapjoyGetTapPointsResult* result, void* userData);

typedef struct TapjoySpendTapPointsResult
{
 s3eTapjoyError m_Error;
 const char* m_ErrorString;

 const char* m_CurrencyName;
 int m_PointTotal;

} TapjoySpendTapPointsResult;

typedef int32 (*TapjoySpendTapPointsCallbackFn)(TapjoySpendTapPointsResult* result, void* userData);


typedef struct TapjoyAwardTapPointsResult
{
 s3eTapjoyError m_Error;
 const char* m_ErrorString;

 const char* m_CurrencyName;
 int m_PointTotal;

} TapjoyAwardTapPointsResult;

typedef int32 (*TapjoyAwardTapPointsCallbackFn)(TapjoyAwardTapPointsResult* result, void* userData);





typedef struct TapjoyImage
{
    void* m_Data;
    int m_BitsPerPixel;
    int m_Width;
    int m_Height;
} TapjoyVGStoreImage;

typedef struct TapjoyVGStoreItem
{
 const char* m_VGStoreItemID;
 const char* m_ProductID;
 int m_Price;
 const char* m_Name;
 const char* m_Description;
 const char* m_VGStoreItemTypeName;
 int m_NumberOwned;
 const char* m_ThumbImageUrl;
 const char* m_FullImageUrl;
 const char* m_DatafileUrl;

 TapjoyImage* m_ThumbImage;
 s3eBool m_Shown;
} TapjoyVGStoreItem;

typedef struct TapjoyFeaturedAppObject
{
 const char* m_Cost;
 const char* m_StoreID;
 const char* m_Name;
 const char* m_Description;
 int m_Amount;
 const char* m_IconURL;
 const char* m_RedirectURL;
 int m_MaxTimesToDisplayThisApp;
 const char* m_FullScreenAdURL;
} TapjoyFeaturedAppObject;

typedef struct TapjoyGetFeaturedAppResult
{
 s3eTapjoyError m_Error;
 const char* m_ErrorString;

 TapjoyFeaturedAppObject m_FeaturedAppObject;
} TapjoyGetFeaturedAppResult;

typedef int32 (*TapjoyGetFeaturedAppCallbackFn)(TapjoyGetFeaturedAppResult* result, void* userData);
# 164 "../h/s3eTapjoy.h"
typedef struct TapjoyGetDisplayAdResult
{
 s3eTapjoyError m_Error;
 const char* m_ErrorString;
} TapjoyGetDisplayAdResult;

typedef int32 (*TapjoyGetDisplayAdCallbackFn)(TapjoyGetDisplayAdResult* result, void* userData);

extern "C" {




s3eBool s3eTapjoyAvailable();
# 202 "../h/s3eTapjoy.h"
s3eResult s3eTapjoyRegister(s3eTapjoyCallback cbid, s3eCallback fn, void* userData);
# 220 "../h/s3eTapjoy.h"
s3eResult s3eTapjoyUnRegister(s3eTapjoyCallback cbid, s3eCallback fn);
# 234 "../h/s3eTapjoy.h"
const char* s3eTapjoyGetErrorString();
# 247 "../h/s3eTapjoy.h"
s3eTapjoyError s3eTapjoyGetError();

s3eResult TapjoyRequestConnect(const char* appID, const char* secretKey);

s3eResult TapjoyActionComplete(const char* actionID);

s3eResult TapjoySetUserID(const char* userID);

s3eResult TapjoyShowOffers();

s3eResult TapjoyShowOffersWithCurrenyID(const char* currencyID, s3eBool enableCurrencySelector);

s3eResult TapjoyGetTapPoints(TapjoyGetTapPointsCallbackFn callbackFn, void* userData);

s3eResult TapjoySpendTapPoints(int amount, TapjoySpendTapPointsCallbackFn callbackFn, void* userData);

s3eResult TapjoyAwardTapPoints(int amount, TapjoyAwardTapPointsCallbackFn callbackFn, void* userData);

s3eResult TapjoyShowVirtualGoods();

TapjoyVGStoreItem* TapjoyGetPurchasedItem(int index);

TapjoyVGStoreItem* TapjoyGetAvailableItem(int index);

s3eResult TapjoyGetFeaturedApp(TapjoyGetFeaturedAppCallbackFn callbackFn, void* userData);

s3eResult TapjoyShowFeaturedAppFullScreenAd();

s3eResult TapjoySetFeaturedAppDisplayCount(int count);

s3eResult TapjoySetTransitionEffect(int transition);

s3eResult TapjoySetOffersNavBarImage(const char* pPNGFilename);

s3eResult TapjoySetUserDefinedColor(int your_color_in_0xAAARRGGBB_format);

s3eResult TapjoyGetDisplayAd(const char* adContentSize, s3eBool shouldRefreshAd, TapjoyGetDisplayAdCallbackFn callbackFn, void* userData);

s3eResult TapjoySetDisplayAdView(int left, int top, int width, int height);

}
# 20 "../source/h/s3eTapjoy_internal.h" 2
# 1 "../source/h/s3eTapjoy_autodefs.h" 1
# 21 "../source/h/s3eTapjoy_internal.h" 2







s3eResult s3eTapjoyInit();




s3eResult s3eTapjoyInit_platform();





void s3eTapjoyTerminate();




void s3eTapjoyTerminate_platform();




s3eResult TapjoyRequestConnect_platform(const char* appID, const char* secretKey);

s3eResult TapjoyActionComplete_platform(const char* actionID);

s3eResult TapjoySetUserID_platform(const char* userID);

s3eResult TapjoyShowOffers_platform();

s3eResult TapjoyShowOffersWithCurrenyID_platform(const char* currencyID, s3eBool enableCurrencySelector);

s3eResult TapjoyGetTapPoints_platform(TapjoyGetTapPointsCallbackFn callbackFn, void* userData);

s3eResult TapjoySpendTapPoints_platform(int amount, TapjoySpendTapPointsCallbackFn callbackFn, void* userData);

s3eResult TapjoyAwardTapPoints_platform(int amount, TapjoyAwardTapPointsCallbackFn callbackFn, void* userData);

s3eResult TapjoyShowVirtualGoods_platform();

TapjoyVGStoreItem* TapjoyGetPurchasedItem_platform(int index);

TapjoyVGStoreItem* TapjoyGetAvailableItem_platform(int index);

s3eResult TapjoyGetFeaturedApp_platform(TapjoyGetFeaturedAppCallbackFn callbackFn, void* userData);

s3eResult TapjoyShowFeaturedAppFullScreenAd_platform();

s3eResult TapjoySetFeaturedAppDisplayCount_platform(int count);

s3eResult TapjoySetTransitionEffect_platform(int transition);

s3eResult TapjoySetOffersNavBarImage_platform(const char* pPNGFilename);

s3eResult TapjoySetUserDefinedColor_platform(int your_color_in_0xAAARRGGBB_format);

s3eResult TapjoyGetDisplayAd_platform(const char* adContentSize, s3eBool shouldRefreshAd, TapjoyGetDisplayAdCallbackFn callbackFn, void* userData);

s3eResult TapjoySetDisplayAdView_platform(int left, int top, int width, int height);
# 11 "C:\\users\\rlezama\\desktop\\airplay\\tapjoyconnectairplaysampleproj\\s3etapjoy\\source\\android\\s3eTapjoy_platform.cpp" 2
# 1 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h" 1
# 17 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
extern "C" {
# 59 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
typedef void (*s3eEdkCallbackCompleteFn)(uint32 extID, int32 notification, void* systemData, void* instance, int32 returnCode, void* completeData);
# 71 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
typedef int32 (*s3eEdkCallbackSpecific) (void* instance, void* systemData, void* userData);
# 86 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
enum s3eEdkCallback
{
# 96 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
    S3E_EDK_IPHONE_OSROTATION = 100,





    S3E_EDK_IPHONE_APPLICATIONDIDBECOMEACTIVE,





    S3E_EDK_IPHONE_APPLICATIONWILLRESIGNACTIVE,





    S3E_EDK_IPHONE_APPLICATIONDIDENTERBACKGROUND,





    S3E_EDK_IPHONE_APPLICATIONWILLENTERFOREGROUND,





    S3E_EDK_IPHONE_APPLICATIONDIDRECIEVELOCALNOTIFICATION,





    S3E_EDK_IPHONE_APPLICATIONDIDRECIEVEREMOTENOTIFICATION,





    S3E_EDK_IPHONE_HANDLEOPENURL,

    S3E_EDK_CALLBACK_MAX
};
# 183 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
extern "C" s3eResult s3eEdkCallbacksEnqueue(uint32 extID,
                                 int notification,
                                 void* systemData =__null,
                                 int sysDataSize =0,
                                 void* instance =__null,
                                 s3eBool oneShot =(0),
                                 s3eEdkCallbackCompleteFn =__null,
                                 void* completeData =__null);
# 234 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
extern "C" s3eResult s3eEdkCallbacksRegister(uint32 extID,
                                  int maxNotification,
                                  int notification,
                                  s3eCallback callback,
                                  void* userData,
                                  s3eBool requireUnique);
# 287 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
extern "C" s3eResult s3eEdkCallbacksRegisterSpecific(uint32 extID,
                                          int maxNotification,
                                          int notification,
                                          s3eEdkCallbackSpecific callback,
                                          void* userData,
                                          s3eBool requireUnique,
                                          void* instance);
# 329 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
extern "C" s3eResult s3eEdkCallbacksRegisterInternal(uint32 extID,
                                                     int32 maxNotification,
                                                     int notification,
                                                     s3eCallback callback,
                                                     void* userData,
                                                     s3eBool requireUnique);
# 358 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
extern "C" s3eResult s3eEdkCallbacksUnRegister(uint32 extID,
                                    int maxNotification,
                                    int notification,
                                    s3eCallback callback,
                                    void* instance =__null);
# 378 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
extern "C" void s3eEdkCallbacksUnRegisterDevice(uint32 extID, void* instance =__null);
# 392 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
extern "C" s3eBool s3eEdkCallbacksIsRegistered(uint32 extID, int32 notification, void* instance =__null);
# 435 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
void s3eEdkSurfaceSetSize(s3eBool synchronous =(0), int width =0, int height =0, int pitch =0);
# 454 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
extern "C" void* s3eEdkMallocOS(int size, s3eBool bMsgOnFail =1);
# 466 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
extern "C" void* s3eEdkReallocOS(void* item, int size, s3eBool bMsgOnFail =1);






extern "C" void s3eEdkFreeOS(void* item);
# 491 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
extern "C" s3eBool s3eEdkIsInitialised(uint32 extID);
# 503 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
typedef void s3eEdkDLLHandle;
# 516 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
extern "C" s3eEdkDLLHandle* s3eEdkLibraryOpen(const char* name);
# 536 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
extern "C" void* s3eEdkLibraryGetSymbol(s3eEdkDLLHandle* handle, const char* name);
# 548 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
extern "C" s3eResult s3eEdkLibraryClose(s3eEdkDLLHandle* handle);
# 557 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
extern "C" const char* s3eEdkLibraryError();
# 572 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
typedef void* (*s3eEdkThreadFunc)();







typedef void (*s3eEdkThreadVoidFunc)();
# 593 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
extern "C" void* s3eEdkThreadRunOnOS(s3eEdkThreadFunc fn, int n_args, ...);
# 605 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
extern "C" void s3eEdkThreadRunOnOSAsync(s3eEdkThreadVoidFunc fn, int n_args, ...);
# 618 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
extern "C" void s3eEdkThreadSetSuspended();
# 629 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
extern "C" void s3eEdkThreadSetResumed();
# 659 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
extern "C" void* s3eEdkGlobalsGet(uint32 extID);


typedef s3eResult (*s3eEdkInitFn)();


typedef void (*s3eEdkTermFn)();




extern "C" void s3eEdkRegister(const char* name,
                    void* funcs,
                    int size,
                    int* funcAttrs,
                    s3eEdkInitFn init,
                    s3eEdkTermFn term,
                    int globalDataSize);
# 693 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
typedef enum s3eEdkErrorPriority
{




    S3E_EXT_ERROR_PRI_MINOR = 0,





    S3E_EXT_ERROR_PRI_NORMAL = 1,





    S3E_EXT_ERROR_PRI_MAJOR = 2,
    S3E_EXT_ERROR_PRI_MAX = 3
} s3eEdkErrorPriority;
# 727 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
extern "C" const char* s3eEdkErrorGetString(uint32 extID);
# 742 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
extern "C" int s3eEdkErrorGet(uint32 extID);
# 758 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
extern "C" s3eResult s3eEdkErrorSet(uint32 extID, int32 error, s3eEdkErrorPriority priority);
# 767 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
extern "C" void s3eEdkErrorSetString(const char* fmt, ...);
# 787 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
extern "C" int s3eEdkGetAppVersionMajor();





extern "C" int s3eEdkGetAppVersionMinor();
# 812 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk.h"
}
# 12 "C:\\users\\rlezama\\desktop\\airplay\\tapjoyconnectairplaysampleproj\\s3etapjoy\\source\\android\\s3eTapjoy_platform.cpp" 2
# 1 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk_android.h" 1
# 20 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk_android.h"
# 1 "../../../../../../../dev/sdk/5.0/s3e/edk/h/jni.h" 1
# 12 "../../../../../../../dev/sdk/5.0/s3e/edk/h/jni.h"
# 1 "c:\\dev\\sdk\\5.0\\platform_libs\\linux\\gcc\\bin\\../lib/gcc/arm-none-linux-gnueabi/4.4.1/include/stdarg.h" 1 3 4
# 40 "c:\\dev\\sdk\\5.0\\platform_libs\\linux\\gcc\\bin\\../lib/gcc/arm-none-linux-gnueabi/4.4.1/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 102 "c:\\dev\\sdk\\5.0\\platform_libs\\linux\\gcc\\bin\\../lib/gcc/arm-none-linux-gnueabi/4.4.1/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 13 "../../../../../../../dev/sdk/5.0/s3e/edk/h/jni.h" 2
# 28 "../../../../../../../dev/sdk/5.0/s3e/edk/h/jni.h"
typedef unsigned char jboolean;
typedef signed char jbyte;
typedef unsigned short jchar;
typedef short jshort;
typedef int jint;
typedef long long jlong;
typedef float jfloat;
typedef double jdouble;



typedef jint jsize;





class _jobject {};
class _jclass : public _jobject {};
class _jstring : public _jobject {};
class _jarray : public _jobject {};
class _jobjectArray : public _jarray {};
class _jbooleanArray : public _jarray {};
class _jbyteArray : public _jarray {};
class _jcharArray : public _jarray {};
class _jshortArray : public _jarray {};
class _jintArray : public _jarray {};
class _jlongArray : public _jarray {};
class _jfloatArray : public _jarray {};
class _jdoubleArray : public _jarray {};
class _jthrowable : public _jobject {};

typedef _jobject* jobject;
typedef _jclass* jclass;
typedef _jstring* jstring;
typedef _jarray* jarray;
typedef _jobjectArray* jobjectArray;
typedef _jbooleanArray* jbooleanArray;
typedef _jbyteArray* jbyteArray;
typedef _jcharArray* jcharArray;
typedef _jshortArray* jshortArray;
typedef _jintArray* jintArray;
typedef _jlongArray* jlongArray;
typedef _jfloatArray* jfloatArray;
typedef _jdoubleArray* jdoubleArray;
typedef _jthrowable* jthrowable;
typedef _jobject* jweak;
# 100 "../../../../../../../dev/sdk/5.0/s3e/edk/h/jni.h"
struct _jfieldID;
typedef struct _jfieldID* jfieldID;

struct _jmethodID;
typedef struct _jmethodID* jmethodID;

struct JNIInvokeInterface;

typedef union jvalue {
    jboolean z;
    jbyte b;
    jchar c;
    jshort s;
    jint i;
    jlong j;
    jfloat f;
    jdouble d;
    jobject l;
} jvalue;

typedef enum jobjectRefType {
    JNIInvalidRefType = 0,
    JNILocalRefType = 1,
    JNIGlobalRefType = 2,
    JNIWeakGlobalRefType = 3
} jobjectRefType;

typedef struct {
    const char* name;
    const char* signature;
    void* fnPtr;
} JNINativeMethod;

struct _JNIEnv;
struct _JavaVM;
typedef const struct JNINativeInterface* C_JNIEnv;


typedef _JNIEnv JNIEnv;
typedef _JavaVM JavaVM;
# 148 "../../../../../../../dev/sdk/5.0/s3e/edk/h/jni.h"
struct JNINativeInterface {
    void* reserved0;
    void* reserved1;
    void* reserved2;
    void* reserved3;

    jint (*GetVersion)(JNIEnv *);

    jclass (*DefineClass)(JNIEnv*, const char*, jobject, const jbyte*,
                        jsize);
    jclass (*FindClass)(JNIEnv*, const char*);

    jmethodID (*FromReflectedMethod)(JNIEnv*, jobject);
    jfieldID (*FromReflectedField)(JNIEnv*, jobject);

    jobject (*ToReflectedMethod)(JNIEnv*, jclass, jmethodID, jboolean);

    jclass (*GetSuperclass)(JNIEnv*, jclass);
    jboolean (*IsAssignableFrom)(JNIEnv*, jclass, jclass);


    jobject (*ToReflectedField)(JNIEnv*, jclass, jfieldID, jboolean);

    jint (*Throw)(JNIEnv*, jthrowable);
    jint (*ThrowNew)(JNIEnv *, jclass, const char *);
    jthrowable (*ExceptionOccurred)(JNIEnv*);
    void (*ExceptionDescribe)(JNIEnv*);
    void (*ExceptionClear)(JNIEnv*);
    void (*FatalError)(JNIEnv*, const char*);

    jint (*PushLocalFrame)(JNIEnv*, jint);
    jobject (*PopLocalFrame)(JNIEnv*, jobject);

    jobject (*NewGlobalRef)(JNIEnv*, jobject);
    void (*DeleteGlobalRef)(JNIEnv*, jobject);
    void (*DeleteLocalRef)(JNIEnv*, jobject);
    jboolean (*IsSameObject)(JNIEnv*, jobject, jobject);

    jobject (*NewLocalRef)(JNIEnv*, jobject);
    jint (*EnsureLocalCapacity)(JNIEnv*, jint);

    jobject (*AllocObject)(JNIEnv*, jclass);
    jobject (*NewObject)(JNIEnv*, jclass, jmethodID, ...);
    jobject (*NewObjectV)(JNIEnv*, jclass, jmethodID, va_list);
    jobject (*NewObjectA)(JNIEnv*, jclass, jmethodID, jvalue*);

    jclass (*GetObjectClass)(JNIEnv*, jobject);
    jboolean (*IsInstanceOf)(JNIEnv*, jobject, jclass);
    jmethodID (*GetMethodID)(JNIEnv*, jclass, const char*, const char*);

    jobject (*CallObjectMethod)(JNIEnv*, jobject, jmethodID, ...);
    jobject (*CallObjectMethodV)(JNIEnv*, jobject, jmethodID, va_list);
    jobject (*CallObjectMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);
    jboolean (*CallBooleanMethod)(JNIEnv*, jobject, jmethodID, ...);
    jboolean (*CallBooleanMethodV)(JNIEnv*, jobject, jmethodID, va_list);
    jboolean (*CallBooleanMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);
    jbyte (*CallByteMethod)(JNIEnv*, jobject, jmethodID, ...);
    jbyte (*CallByteMethodV)(JNIEnv*, jobject, jmethodID, va_list);
    jbyte (*CallByteMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);
    jchar (*CallCharMethod)(JNIEnv*, jobject, jmethodID, ...);
    jchar (*CallCharMethodV)(JNIEnv*, jobject, jmethodID, va_list);
    jchar (*CallCharMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);
    jshort (*CallShortMethod)(JNIEnv*, jobject, jmethodID, ...);
    jshort (*CallShortMethodV)(JNIEnv*, jobject, jmethodID, va_list);
    jshort (*CallShortMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);
    jint (*CallIntMethod)(JNIEnv*, jobject, jmethodID, ...);
    jint (*CallIntMethodV)(JNIEnv*, jobject, jmethodID, va_list);
    jint (*CallIntMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);
    jlong (*CallLongMethod)(JNIEnv*, jobject, jmethodID, ...);
    jlong (*CallLongMethodV)(JNIEnv*, jobject, jmethodID, va_list);
    jlong (*CallLongMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);
    jfloat (*CallFloatMethod)(JNIEnv*, jobject, jmethodID, ...);
    jfloat (*CallFloatMethodV)(JNIEnv*, jobject, jmethodID, va_list);
    jfloat (*CallFloatMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);
    jdouble (*CallDoubleMethod)(JNIEnv*, jobject, jmethodID, ...);
    jdouble (*CallDoubleMethodV)(JNIEnv*, jobject, jmethodID, va_list);
    jdouble (*CallDoubleMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);
    void (*CallVoidMethod)(JNIEnv*, jobject, jmethodID, ...);
    void (*CallVoidMethodV)(JNIEnv*, jobject, jmethodID, va_list);
    void (*CallVoidMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);

    jobject (*CallNonvirtualObjectMethod)(JNIEnv*, jobject, jclass,
                        jmethodID, ...);
    jobject (*CallNonvirtualObjectMethodV)(JNIEnv*, jobject, jclass,
                        jmethodID, va_list);
    jobject (*CallNonvirtualObjectMethodA)(JNIEnv*, jobject, jclass,
                        jmethodID, jvalue*);
    jboolean (*CallNonvirtualBooleanMethod)(JNIEnv*, jobject, jclass,
                        jmethodID, ...);
    jboolean (*CallNonvirtualBooleanMethodV)(JNIEnv*, jobject, jclass,
                         jmethodID, va_list);
    jboolean (*CallNonvirtualBooleanMethodA)(JNIEnv*, jobject, jclass,
                         jmethodID, jvalue*);
    jbyte (*CallNonvirtualByteMethod)(JNIEnv*, jobject, jclass,
                        jmethodID, ...);
    jbyte (*CallNonvirtualByteMethodV)(JNIEnv*, jobject, jclass,
                        jmethodID, va_list);
    jbyte (*CallNonvirtualByteMethodA)(JNIEnv*, jobject, jclass,
                        jmethodID, jvalue*);
    jchar (*CallNonvirtualCharMethod)(JNIEnv*, jobject, jclass,
                        jmethodID, ...);
    jchar (*CallNonvirtualCharMethodV)(JNIEnv*, jobject, jclass,
                        jmethodID, va_list);
    jchar (*CallNonvirtualCharMethodA)(JNIEnv*, jobject, jclass,
                        jmethodID, jvalue*);
    jshort (*CallNonvirtualShortMethod)(JNIEnv*, jobject, jclass,
                        jmethodID, ...);
    jshort (*CallNonvirtualShortMethodV)(JNIEnv*, jobject, jclass,
                        jmethodID, va_list);
    jshort (*CallNonvirtualShortMethodA)(JNIEnv*, jobject, jclass,
                        jmethodID, jvalue*);
    jint (*CallNonvirtualIntMethod)(JNIEnv*, jobject, jclass,
                        jmethodID, ...);
    jint (*CallNonvirtualIntMethodV)(JNIEnv*, jobject, jclass,
                        jmethodID, va_list);
    jint (*CallNonvirtualIntMethodA)(JNIEnv*, jobject, jclass,
                        jmethodID, jvalue*);
    jlong (*CallNonvirtualLongMethod)(JNIEnv*, jobject, jclass,
                        jmethodID, ...);
    jlong (*CallNonvirtualLongMethodV)(JNIEnv*, jobject, jclass,
                        jmethodID, va_list);
    jlong (*CallNonvirtualLongMethodA)(JNIEnv*, jobject, jclass,
                        jmethodID, jvalue*);
    jfloat (*CallNonvirtualFloatMethod)(JNIEnv*, jobject, jclass,
                        jmethodID, ...);
    jfloat (*CallNonvirtualFloatMethodV)(JNIEnv*, jobject, jclass,
                        jmethodID, va_list);
    jfloat (*CallNonvirtualFloatMethodA)(JNIEnv*, jobject, jclass,
                        jmethodID, jvalue*);
    jdouble (*CallNonvirtualDoubleMethod)(JNIEnv*, jobject, jclass,
                        jmethodID, ...);
    jdouble (*CallNonvirtualDoubleMethodV)(JNIEnv*, jobject, jclass,
                        jmethodID, va_list);
    jdouble (*CallNonvirtualDoubleMethodA)(JNIEnv*, jobject, jclass,
                        jmethodID, jvalue*);
    void (*CallNonvirtualVoidMethod)(JNIEnv*, jobject, jclass,
                        jmethodID, ...);
    void (*CallNonvirtualVoidMethodV)(JNIEnv*, jobject, jclass,
                        jmethodID, va_list);
    void (*CallNonvirtualVoidMethodA)(JNIEnv*, jobject, jclass,
                        jmethodID, jvalue*);

    jfieldID (*GetFieldID)(JNIEnv*, jclass, const char*, const char*);

    jobject (*GetObjectField)(JNIEnv*, jobject, jfieldID);
    jboolean (*GetBooleanField)(JNIEnv*, jobject, jfieldID);
    jbyte (*GetByteField)(JNIEnv*, jobject, jfieldID);
    jchar (*GetCharField)(JNIEnv*, jobject, jfieldID);
    jshort (*GetShortField)(JNIEnv*, jobject, jfieldID);
    jint (*GetIntField)(JNIEnv*, jobject, jfieldID);
    jlong (*GetLongField)(JNIEnv*, jobject, jfieldID);
    jfloat (*GetFloatField)(JNIEnv*, jobject, jfieldID);
    jdouble (*GetDoubleField)(JNIEnv*, jobject, jfieldID);

    void (*SetObjectField)(JNIEnv*, jobject, jfieldID, jobject);
    void (*SetBooleanField)(JNIEnv*, jobject, jfieldID, jboolean);
    void (*SetByteField)(JNIEnv*, jobject, jfieldID, jbyte);
    void (*SetCharField)(JNIEnv*, jobject, jfieldID, jchar);
    void (*SetShortField)(JNIEnv*, jobject, jfieldID, jshort);
    void (*SetIntField)(JNIEnv*, jobject, jfieldID, jint);
    void (*SetLongField)(JNIEnv*, jobject, jfieldID, jlong);
    void (*SetFloatField)(JNIEnv*, jobject, jfieldID, jfloat);
    void (*SetDoubleField)(JNIEnv*, jobject, jfieldID, jdouble);

    jmethodID (*GetStaticMethodID)(JNIEnv*, jclass, const char*, const char*);

    jobject (*CallStaticObjectMethod)(JNIEnv*, jclass, jmethodID, ...);
    jobject (*CallStaticObjectMethodV)(JNIEnv*, jclass, jmethodID, va_list);
    jobject (*CallStaticObjectMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);
    jboolean (*CallStaticBooleanMethod)(JNIEnv*, jclass, jmethodID, ...);
    jboolean (*CallStaticBooleanMethodV)(JNIEnv*, jclass, jmethodID,
                        va_list);
    jboolean (*CallStaticBooleanMethodA)(JNIEnv*, jclass, jmethodID,
                        jvalue*);
    jbyte (*CallStaticByteMethod)(JNIEnv*, jclass, jmethodID, ...);
    jbyte (*CallStaticByteMethodV)(JNIEnv*, jclass, jmethodID, va_list);
    jbyte (*CallStaticByteMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);
    jchar (*CallStaticCharMethod)(JNIEnv*, jclass, jmethodID, ...);
    jchar (*CallStaticCharMethodV)(JNIEnv*, jclass, jmethodID, va_list);
    jchar (*CallStaticCharMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);
    jshort (*CallStaticShortMethod)(JNIEnv*, jclass, jmethodID, ...);
    jshort (*CallStaticShortMethodV)(JNIEnv*, jclass, jmethodID, va_list);
    jshort (*CallStaticShortMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);
    jint (*CallStaticIntMethod)(JNIEnv*, jclass, jmethodID, ...);
    jint (*CallStaticIntMethodV)(JNIEnv*, jclass, jmethodID, va_list);
    jint (*CallStaticIntMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);
    jlong (*CallStaticLongMethod)(JNIEnv*, jclass, jmethodID, ...);
    jlong (*CallStaticLongMethodV)(JNIEnv*, jclass, jmethodID, va_list);
    jlong (*CallStaticLongMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);
    jfloat (*CallStaticFloatMethod)(JNIEnv*, jclass, jmethodID, ...);
    jfloat (*CallStaticFloatMethodV)(JNIEnv*, jclass, jmethodID, va_list);
    jfloat (*CallStaticFloatMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);
    jdouble (*CallStaticDoubleMethod)(JNIEnv*, jclass, jmethodID, ...);
    jdouble (*CallStaticDoubleMethodV)(JNIEnv*, jclass, jmethodID, va_list);
    jdouble (*CallStaticDoubleMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);
    void (*CallStaticVoidMethod)(JNIEnv*, jclass, jmethodID, ...);
    void (*CallStaticVoidMethodV)(JNIEnv*, jclass, jmethodID, va_list);
    void (*CallStaticVoidMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);

    jfieldID (*GetStaticFieldID)(JNIEnv*, jclass, const char*,
                        const char*);

    jobject (*GetStaticObjectField)(JNIEnv*, jclass, jfieldID);
    jboolean (*GetStaticBooleanField)(JNIEnv*, jclass, jfieldID);
    jbyte (*GetStaticByteField)(JNIEnv*, jclass, jfieldID);
    jchar (*GetStaticCharField)(JNIEnv*, jclass, jfieldID);
    jshort (*GetStaticShortField)(JNIEnv*, jclass, jfieldID);
    jint (*GetStaticIntField)(JNIEnv*, jclass, jfieldID);
    jlong (*GetStaticLongField)(JNIEnv*, jclass, jfieldID);
    jfloat (*GetStaticFloatField)(JNIEnv*, jclass, jfieldID);
    jdouble (*GetStaticDoubleField)(JNIEnv*, jclass, jfieldID);

    void (*SetStaticObjectField)(JNIEnv*, jclass, jfieldID, jobject);
    void (*SetStaticBooleanField)(JNIEnv*, jclass, jfieldID, jboolean);
    void (*SetStaticByteField)(JNIEnv*, jclass, jfieldID, jbyte);
    void (*SetStaticCharField)(JNIEnv*, jclass, jfieldID, jchar);
    void (*SetStaticShortField)(JNIEnv*, jclass, jfieldID, jshort);
    void (*SetStaticIntField)(JNIEnv*, jclass, jfieldID, jint);
    void (*SetStaticLongField)(JNIEnv*, jclass, jfieldID, jlong);
    void (*SetStaticFloatField)(JNIEnv*, jclass, jfieldID, jfloat);
    void (*SetStaticDoubleField)(JNIEnv*, jclass, jfieldID, jdouble);

    jstring (*NewString)(JNIEnv*, const jchar*, jsize);
    jsize (*GetStringLength)(JNIEnv*, jstring);
    const jchar* (*GetStringChars)(JNIEnv*, jstring, jboolean*);
    void (*ReleaseStringChars)(JNIEnv*, jstring, const jchar*);
    jstring (*NewStringUTF)(JNIEnv*, const char*);
    jsize (*GetStringUTFLength)(JNIEnv*, jstring);

    const char* (*GetStringUTFChars)(JNIEnv*, jstring, jboolean*);
    void (*ReleaseStringUTFChars)(JNIEnv*, jstring, const char*);
    jsize (*GetArrayLength)(JNIEnv*, jarray);
    jobjectArray (*NewObjectArray)(JNIEnv*, jsize, jclass, jobject);
    jobject (*GetObjectArrayElement)(JNIEnv*, jobjectArray, jsize);
    void (*SetObjectArrayElement)(JNIEnv*, jobjectArray, jsize, jobject);

    jbooleanArray (*NewBooleanArray)(JNIEnv*, jsize);
    jbyteArray (*NewByteArray)(JNIEnv*, jsize);
    jcharArray (*NewCharArray)(JNIEnv*, jsize);
    jshortArray (*NewShortArray)(JNIEnv*, jsize);
    jintArray (*NewIntArray)(JNIEnv*, jsize);
    jlongArray (*NewLongArray)(JNIEnv*, jsize);
    jfloatArray (*NewFloatArray)(JNIEnv*, jsize);
    jdoubleArray (*NewDoubleArray)(JNIEnv*, jsize);

    jboolean* (*GetBooleanArrayElements)(JNIEnv*, jbooleanArray, jboolean*);
    jbyte* (*GetByteArrayElements)(JNIEnv*, jbyteArray, jboolean*);
    jchar* (*GetCharArrayElements)(JNIEnv*, jcharArray, jboolean*);
    jshort* (*GetShortArrayElements)(JNIEnv*, jshortArray, jboolean*);
    jint* (*GetIntArrayElements)(JNIEnv*, jintArray, jboolean*);
    jlong* (*GetLongArrayElements)(JNIEnv*, jlongArray, jboolean*);
    jfloat* (*GetFloatArrayElements)(JNIEnv*, jfloatArray, jboolean*);
    jdouble* (*GetDoubleArrayElements)(JNIEnv*, jdoubleArray, jboolean*);

    void (*ReleaseBooleanArrayElements)(JNIEnv*, jbooleanArray,
                        jboolean*, jint);
    void (*ReleaseByteArrayElements)(JNIEnv*, jbyteArray,
                        jbyte*, jint);
    void (*ReleaseCharArrayElements)(JNIEnv*, jcharArray,
                        jchar*, jint);
    void (*ReleaseShortArrayElements)(JNIEnv*, jshortArray,
                        jshort*, jint);
    void (*ReleaseIntArrayElements)(JNIEnv*, jintArray,
                        jint*, jint);
    void (*ReleaseLongArrayElements)(JNIEnv*, jlongArray,
                        jlong*, jint);
    void (*ReleaseFloatArrayElements)(JNIEnv*, jfloatArray,
                        jfloat*, jint);
    void (*ReleaseDoubleArrayElements)(JNIEnv*, jdoubleArray,
                        jdouble*, jint);

    void (*GetBooleanArrayRegion)(JNIEnv*, jbooleanArray,
                        jsize, jsize, jboolean*);
    void (*GetByteArrayRegion)(JNIEnv*, jbyteArray,
                        jsize, jsize, jbyte*);
    void (*GetCharArrayRegion)(JNIEnv*, jcharArray,
                        jsize, jsize, jchar*);
    void (*GetShortArrayRegion)(JNIEnv*, jshortArray,
                        jsize, jsize, jshort*);
    void (*GetIntArrayRegion)(JNIEnv*, jintArray,
                        jsize, jsize, jint*);
    void (*GetLongArrayRegion)(JNIEnv*, jlongArray,
                        jsize, jsize, jlong*);
    void (*GetFloatArrayRegion)(JNIEnv*, jfloatArray,
                        jsize, jsize, jfloat*);
    void (*GetDoubleArrayRegion)(JNIEnv*, jdoubleArray,
                        jsize, jsize, jdouble*);


    void (*SetBooleanArrayRegion)(JNIEnv*, jbooleanArray,
                        jsize, jsize, const jboolean*);
    void (*SetByteArrayRegion)(JNIEnv*, jbyteArray,
                        jsize, jsize, const jbyte*);
    void (*SetCharArrayRegion)(JNIEnv*, jcharArray,
                        jsize, jsize, const jchar*);
    void (*SetShortArrayRegion)(JNIEnv*, jshortArray,
                        jsize, jsize, const jshort*);
    void (*SetIntArrayRegion)(JNIEnv*, jintArray,
                        jsize, jsize, const jint*);
    void (*SetLongArrayRegion)(JNIEnv*, jlongArray,
                        jsize, jsize, const jlong*);
    void (*SetFloatArrayRegion)(JNIEnv*, jfloatArray,
                        jsize, jsize, const jfloat*);
    void (*SetDoubleArrayRegion)(JNIEnv*, jdoubleArray,
                        jsize, jsize, const jdouble*);

    jint (*RegisterNatives)(JNIEnv*, jclass, const JNINativeMethod*,
                        jint);
    jint (*UnregisterNatives)(JNIEnv*, jclass);
    jint (*MonitorEnter)(JNIEnv*, jobject);
    jint (*MonitorExit)(JNIEnv*, jobject);
    jint (*GetJavaVM)(JNIEnv*, JavaVM**);

    void (*GetStringRegion)(JNIEnv*, jstring, jsize, jsize, jchar*);
    void (*GetStringUTFRegion)(JNIEnv*, jstring, jsize, jsize, char*);

    void* (*GetPrimitiveArrayCritical)(JNIEnv*, jarray, jboolean*);
    void (*ReleasePrimitiveArrayCritical)(JNIEnv*, jarray, void*, jint);

    const jchar* (*GetStringCritical)(JNIEnv*, jstring, jboolean*);
    void (*ReleaseStringCritical)(JNIEnv*, jstring, const jchar*);

    jweak (*NewWeakGlobalRef)(JNIEnv*, jobject);
    void (*DeleteWeakGlobalRef)(JNIEnv*, jweak);

    jboolean (*ExceptionCheck)(JNIEnv*);

    jobject (*NewDirectByteBuffer)(JNIEnv*, void*, jlong);
    void* (*GetDirectBufferAddress)(JNIEnv*, jobject);
    jlong (*GetDirectBufferCapacity)(JNIEnv*, jobject);


    jobjectRefType (*GetObjectRefType)(JNIEnv*, jobject);
};







struct _JNIEnv {

    const struct JNINativeInterface* functions;



    jint GetVersion()
    { return functions->GetVersion(this); }

    jclass DefineClass(const char *name, jobject loader, const jbyte* buf,
        jsize bufLen)
    { return functions->DefineClass(this, name, loader, buf, bufLen); }

    jclass FindClass(const char* name)
    { return functions->FindClass(this, name); }

    jmethodID FromReflectedMethod(jobject method)
    { return functions->FromReflectedMethod(this, method); }

    jfieldID FromReflectedField(jobject field)
    { return functions->FromReflectedField(this, field); }

    jobject ToReflectedMethod(jclass cls, jmethodID methodID, jboolean isStatic)
    { return functions->ToReflectedMethod(this, cls, methodID, isStatic); }

    jclass GetSuperclass(jclass clazz)
    { return functions->GetSuperclass(this, clazz); }

    jboolean IsAssignableFrom(jclass clazz1, jclass clazz2)
    { return functions->IsAssignableFrom(this, clazz1, clazz2); }

    jobject ToReflectedField(jclass cls, jfieldID fieldID, jboolean isStatic)
    { return functions->ToReflectedField(this, cls, fieldID, isStatic); }

    jint Throw(jthrowable obj)
    { return functions->Throw(this, obj); }

    jint ThrowNew(jclass clazz, const char* message)
    { return functions->ThrowNew(this, clazz, message); }

    jthrowable ExceptionOccurred()
    { return functions->ExceptionOccurred(this); }

    void ExceptionDescribe()
    { functions->ExceptionDescribe(this); }

    void ExceptionClear()
    { functions->ExceptionClear(this); }

    void FatalError(const char* msg)
    { functions->FatalError(this, msg); }

    jint PushLocalFrame(jint capacity)
    { return functions->PushLocalFrame(this, capacity); }

    jobject PopLocalFrame(jobject result)
    { return functions->PopLocalFrame(this, result); }

    jobject NewGlobalRef(jobject obj)
    { return functions->NewGlobalRef(this, obj); }

    void DeleteGlobalRef(jobject globalRef)
    { functions->DeleteGlobalRef(this, globalRef); }

    void DeleteLocalRef(jobject localRef)
    { functions->DeleteLocalRef(this, localRef); }

    jboolean IsSameObject(jobject ref1, jobject ref2)
    { return functions->IsSameObject(this, ref1, ref2); }

    jobject NewLocalRef(jobject ref)
    { return functions->NewLocalRef(this, ref); }

    jint EnsureLocalCapacity(jint capacity)
    { return functions->EnsureLocalCapacity(this, capacity); }

    jobject AllocObject(jclass clazz)
    { return functions->AllocObject(this, clazz); }

    jobject NewObject(jclass clazz, jmethodID methodID, ...)
    {
        va_list args;
        __builtin_va_start(args,methodID);
        jobject result = functions->NewObjectV(this, clazz, methodID, args);
        __builtin_va_end(args);
        return result;
    }

    jobject NewObjectV(jclass clazz, jmethodID methodID, va_list args)
    { return functions->NewObjectV(this, clazz, methodID, args); }

    jobject NewObjectA(jclass clazz, jmethodID methodID, jvalue* args)
    { return functions->NewObjectA(this, clazz, methodID, args); }

    jclass GetObjectClass(jobject obj)
    { return functions->GetObjectClass(this, obj); }

    jboolean IsInstanceOf(jobject obj, jclass clazz)
    { return functions->IsInstanceOf(this, obj, clazz); }

    jmethodID GetMethodID(jclass clazz, const char* name, const char* sig)
    { return functions->GetMethodID(this, clazz, name, sig); }
# 617 "../../../../../../../dev/sdk/5.0/s3e/edk/h/jni.h"
    jobject CallObjectMethod(jobject obj, jmethodID methodID, ...) { jobject result; va_list args; __builtin_va_start(args,methodID); result = functions->CallObjectMethodV(this, obj, methodID, args); __builtin_va_end(args); return result; } jobject CallObjectMethodV(jobject obj, jmethodID methodID, va_list args) { return functions->CallObjectMethodV(this, obj, methodID, args); } jobject CallObjectMethodA(jobject obj, jmethodID methodID, jvalue* args) { return functions->CallObjectMethodA(this, obj, methodID, args); }
    jboolean CallBooleanMethod(jobject obj, jmethodID methodID, ...) { jboolean result; va_list args; __builtin_va_start(args,methodID); result = functions->CallBooleanMethodV(this, obj, methodID, args); __builtin_va_end(args); return result; } jboolean CallBooleanMethodV(jobject obj, jmethodID methodID, va_list args) { return functions->CallBooleanMethodV(this, obj, methodID, args); } jboolean CallBooleanMethodA(jobject obj, jmethodID methodID, jvalue* args) { return functions->CallBooleanMethodA(this, obj, methodID, args); }
    jbyte CallByteMethod(jobject obj, jmethodID methodID, ...) { jbyte result; va_list args; __builtin_va_start(args,methodID); result = functions->CallByteMethodV(this, obj, methodID, args); __builtin_va_end(args); return result; } jbyte CallByteMethodV(jobject obj, jmethodID methodID, va_list args) { return functions->CallByteMethodV(this, obj, methodID, args); } jbyte CallByteMethodA(jobject obj, jmethodID methodID, jvalue* args) { return functions->CallByteMethodA(this, obj, methodID, args); }
    jchar CallCharMethod(jobject obj, jmethodID methodID, ...) { jchar result; va_list args; __builtin_va_start(args,methodID); result = functions->CallCharMethodV(this, obj, methodID, args); __builtin_va_end(args); return result; } jchar CallCharMethodV(jobject obj, jmethodID methodID, va_list args) { return functions->CallCharMethodV(this, obj, methodID, args); } jchar CallCharMethodA(jobject obj, jmethodID methodID, jvalue* args) { return functions->CallCharMethodA(this, obj, methodID, args); }
    jshort CallShortMethod(jobject obj, jmethodID methodID, ...) { jshort result; va_list args; __builtin_va_start(args,methodID); result = functions->CallShortMethodV(this, obj, methodID, args); __builtin_va_end(args); return result; } jshort CallShortMethodV(jobject obj, jmethodID methodID, va_list args) { return functions->CallShortMethodV(this, obj, methodID, args); } jshort CallShortMethodA(jobject obj, jmethodID methodID, jvalue* args) { return functions->CallShortMethodA(this, obj, methodID, args); }
    jint CallIntMethod(jobject obj, jmethodID methodID, ...) { jint result; va_list args; __builtin_va_start(args,methodID); result = functions->CallIntMethodV(this, obj, methodID, args); __builtin_va_end(args); return result; } jint CallIntMethodV(jobject obj, jmethodID methodID, va_list args) { return functions->CallIntMethodV(this, obj, methodID, args); } jint CallIntMethodA(jobject obj, jmethodID methodID, jvalue* args) { return functions->CallIntMethodA(this, obj, methodID, args); }
    jlong CallLongMethod(jobject obj, jmethodID methodID, ...) { jlong result; va_list args; __builtin_va_start(args,methodID); result = functions->CallLongMethodV(this, obj, methodID, args); __builtin_va_end(args); return result; } jlong CallLongMethodV(jobject obj, jmethodID methodID, va_list args) { return functions->CallLongMethodV(this, obj, methodID, args); } jlong CallLongMethodA(jobject obj, jmethodID methodID, jvalue* args) { return functions->CallLongMethodA(this, obj, methodID, args); }
    jfloat CallFloatMethod(jobject obj, jmethodID methodID, ...) { jfloat result; va_list args; __builtin_va_start(args,methodID); result = functions->CallFloatMethodV(this, obj, methodID, args); __builtin_va_end(args); return result; } jfloat CallFloatMethodV(jobject obj, jmethodID methodID, va_list args) { return functions->CallFloatMethodV(this, obj, methodID, args); } jfloat CallFloatMethodA(jobject obj, jmethodID methodID, jvalue* args) { return functions->CallFloatMethodA(this, obj, methodID, args); }
    jdouble CallDoubleMethod(jobject obj, jmethodID methodID, ...) { jdouble result; va_list args; __builtin_va_start(args,methodID); result = functions->CallDoubleMethodV(this, obj, methodID, args); __builtin_va_end(args); return result; } jdouble CallDoubleMethodV(jobject obj, jmethodID methodID, va_list args) { return functions->CallDoubleMethodV(this, obj, methodID, args); } jdouble CallDoubleMethodA(jobject obj, jmethodID methodID, jvalue* args) { return functions->CallDoubleMethodA(this, obj, methodID, args); }

    void CallVoidMethod(jobject obj, jmethodID methodID, ...)
    {
        va_list args;
        __builtin_va_start(args,methodID);
        functions->CallVoidMethodV(this, obj, methodID, args);
        __builtin_va_end(args);
    }
    void CallVoidMethodV(jobject obj, jmethodID methodID, va_list args)
    { functions->CallVoidMethodV(this, obj, methodID, args); }
    void CallVoidMethodA(jobject obj, jmethodID methodID, jvalue* args)
    { functions->CallVoidMethodA(this, obj, methodID, args); }
# 667 "../../../../../../../dev/sdk/5.0/s3e/edk/h/jni.h"
    jobject CallNonvirtualObjectMethod(jobject obj, jclass clazz, jmethodID methodID, ...) { jobject result; va_list args; __builtin_va_start(args,methodID); result = functions->CallNonvirtualObjectMethodV(this, obj, clazz, methodID, args); __builtin_va_end(args); return result; } jobject CallNonvirtualObjectMethodV(jobject obj, jclass clazz, jmethodID methodID, va_list args) { return functions->CallNonvirtualObjectMethodV(this, obj, clazz, methodID, args); } jobject CallNonvirtualObjectMethodA(jobject obj, jclass clazz, jmethodID methodID, jvalue* args) { return functions->CallNonvirtualObjectMethodA(this, obj, clazz, methodID, args); }
    jboolean CallNonvirtualBooleanMethod(jobject obj, jclass clazz, jmethodID methodID, ...) { jboolean result; va_list args; __builtin_va_start(args,methodID); result = functions->CallNonvirtualBooleanMethodV(this, obj, clazz, methodID, args); __builtin_va_end(args); return result; } jboolean CallNonvirtualBooleanMethodV(jobject obj, jclass clazz, jmethodID methodID, va_list args) { return functions->CallNonvirtualBooleanMethodV(this, obj, clazz, methodID, args); } jboolean CallNonvirtualBooleanMethodA(jobject obj, jclass clazz, jmethodID methodID, jvalue* args) { return functions->CallNonvirtualBooleanMethodA(this, obj, clazz, methodID, args); }
    jbyte CallNonvirtualByteMethod(jobject obj, jclass clazz, jmethodID methodID, ...) { jbyte result; va_list args; __builtin_va_start(args,methodID); result = functions->CallNonvirtualByteMethodV(this, obj, clazz, methodID, args); __builtin_va_end(args); return result; } jbyte CallNonvirtualByteMethodV(jobject obj, jclass clazz, jmethodID methodID, va_list args) { return functions->CallNonvirtualByteMethodV(this, obj, clazz, methodID, args); } jbyte CallNonvirtualByteMethodA(jobject obj, jclass clazz, jmethodID methodID, jvalue* args) { return functions->CallNonvirtualByteMethodA(this, obj, clazz, methodID, args); }
    jchar CallNonvirtualCharMethod(jobject obj, jclass clazz, jmethodID methodID, ...) { jchar result; va_list args; __builtin_va_start(args,methodID); result = functions->CallNonvirtualCharMethodV(this, obj, clazz, methodID, args); __builtin_va_end(args); return result; } jchar CallNonvirtualCharMethodV(jobject obj, jclass clazz, jmethodID methodID, va_list args) { return functions->CallNonvirtualCharMethodV(this, obj, clazz, methodID, args); } jchar CallNonvirtualCharMethodA(jobject obj, jclass clazz, jmethodID methodID, jvalue* args) { return functions->CallNonvirtualCharMethodA(this, obj, clazz, methodID, args); }
    jshort CallNonvirtualShortMethod(jobject obj, jclass clazz, jmethodID methodID, ...) { jshort result; va_list args; __builtin_va_start(args,methodID); result = functions->CallNonvirtualShortMethodV(this, obj, clazz, methodID, args); __builtin_va_end(args); return result; } jshort CallNonvirtualShortMethodV(jobject obj, jclass clazz, jmethodID methodID, va_list args) { return functions->CallNonvirtualShortMethodV(this, obj, clazz, methodID, args); } jshort CallNonvirtualShortMethodA(jobject obj, jclass clazz, jmethodID methodID, jvalue* args) { return functions->CallNonvirtualShortMethodA(this, obj, clazz, methodID, args); }
    jint CallNonvirtualIntMethod(jobject obj, jclass clazz, jmethodID methodID, ...) { jint result; va_list args; __builtin_va_start(args,methodID); result = functions->CallNonvirtualIntMethodV(this, obj, clazz, methodID, args); __builtin_va_end(args); return result; } jint CallNonvirtualIntMethodV(jobject obj, jclass clazz, jmethodID methodID, va_list args) { return functions->CallNonvirtualIntMethodV(this, obj, clazz, methodID, args); } jint CallNonvirtualIntMethodA(jobject obj, jclass clazz, jmethodID methodID, jvalue* args) { return functions->CallNonvirtualIntMethodA(this, obj, clazz, methodID, args); }
    jlong CallNonvirtualLongMethod(jobject obj, jclass clazz, jmethodID methodID, ...) { jlong result; va_list args; __builtin_va_start(args,methodID); result = functions->CallNonvirtualLongMethodV(this, obj, clazz, methodID, args); __builtin_va_end(args); return result; } jlong CallNonvirtualLongMethodV(jobject obj, jclass clazz, jmethodID methodID, va_list args) { return functions->CallNonvirtualLongMethodV(this, obj, clazz, methodID, args); } jlong CallNonvirtualLongMethodA(jobject obj, jclass clazz, jmethodID methodID, jvalue* args) { return functions->CallNonvirtualLongMethodA(this, obj, clazz, methodID, args); }
    jfloat CallNonvirtualFloatMethod(jobject obj, jclass clazz, jmethodID methodID, ...) { jfloat result; va_list args; __builtin_va_start(args,methodID); result = functions->CallNonvirtualFloatMethodV(this, obj, clazz, methodID, args); __builtin_va_end(args); return result; } jfloat CallNonvirtualFloatMethodV(jobject obj, jclass clazz, jmethodID methodID, va_list args) { return functions->CallNonvirtualFloatMethodV(this, obj, clazz, methodID, args); } jfloat CallNonvirtualFloatMethodA(jobject obj, jclass clazz, jmethodID methodID, jvalue* args) { return functions->CallNonvirtualFloatMethodA(this, obj, clazz, methodID, args); }
    jdouble CallNonvirtualDoubleMethod(jobject obj, jclass clazz, jmethodID methodID, ...) { jdouble result; va_list args; __builtin_va_start(args,methodID); result = functions->CallNonvirtualDoubleMethodV(this, obj, clazz, methodID, args); __builtin_va_end(args); return result; } jdouble CallNonvirtualDoubleMethodV(jobject obj, jclass clazz, jmethodID methodID, va_list args) { return functions->CallNonvirtualDoubleMethodV(this, obj, clazz, methodID, args); } jdouble CallNonvirtualDoubleMethodA(jobject obj, jclass clazz, jmethodID methodID, jvalue* args) { return functions->CallNonvirtualDoubleMethodA(this, obj, clazz, methodID, args); }

    void CallNonvirtualVoidMethod(jobject obj, jclass clazz,
        jmethodID methodID, ...)
    {
        va_list args;
        __builtin_va_start(args,methodID);
        functions->CallNonvirtualVoidMethodV(this, obj, clazz, methodID, args);
        __builtin_va_end(args);
    }
    void CallNonvirtualVoidMethodV(jobject obj, jclass clazz,
        jmethodID methodID, va_list args)
    { functions->CallNonvirtualVoidMethodV(this, obj, clazz, methodID, args); }
    void CallNonvirtualVoidMethodA(jobject obj, jclass clazz,
        jmethodID methodID, jvalue* args)
    { functions->CallNonvirtualVoidMethodA(this, obj, clazz, methodID, args); }

    jfieldID GetFieldID(jclass clazz, const char* name, const char* sig)
    { return functions->GetFieldID(this, clazz, name, sig); }

    jobject GetObjectField(jobject obj, jfieldID fieldID)
    { return functions->GetObjectField(this, obj, fieldID); }
    jboolean GetBooleanField(jobject obj, jfieldID fieldID)
    { return functions->GetBooleanField(this, obj, fieldID); }
    jbyte GetByteField(jobject obj, jfieldID fieldID)
    { return functions->GetByteField(this, obj, fieldID); }
    jchar GetCharField(jobject obj, jfieldID fieldID)
    { return functions->GetCharField(this, obj, fieldID); }
    jshort GetShortField(jobject obj, jfieldID fieldID)
    { return functions->GetShortField(this, obj, fieldID); }
    jint GetIntField(jobject obj, jfieldID fieldID)
    { return functions->GetIntField(this, obj, fieldID); }
    jlong GetLongField(jobject obj, jfieldID fieldID)
    { return functions->GetLongField(this, obj, fieldID); }
    jfloat GetFloatField(jobject obj, jfieldID fieldID)
    { return functions->GetFloatField(this, obj, fieldID); }
    jdouble GetDoubleField(jobject obj, jfieldID fieldID)
    { return functions->GetDoubleField(this, obj, fieldID); }

    void SetObjectField(jobject obj, jfieldID fieldID, jobject value)
    { functions->SetObjectField(this, obj, fieldID, value); }
    void SetBooleanField(jobject obj, jfieldID fieldID, jboolean value)
    { functions->SetBooleanField(this, obj, fieldID, value); }
    void SetByteField(jobject obj, jfieldID fieldID, jbyte value)
    { functions->SetByteField(this, obj, fieldID, value); }
    void SetCharField(jobject obj, jfieldID fieldID, jchar value)
    { functions->SetCharField(this, obj, fieldID, value); }
    void SetShortField(jobject obj, jfieldID fieldID, jshort value)
    { functions->SetShortField(this, obj, fieldID, value); }
    void SetIntField(jobject obj, jfieldID fieldID, jint value)
    { functions->SetIntField(this, obj, fieldID, value); }
    void SetLongField(jobject obj, jfieldID fieldID, jlong value)
    { functions->SetLongField(this, obj, fieldID, value); }
    void SetFloatField(jobject obj, jfieldID fieldID, jfloat value)
    { functions->SetFloatField(this, obj, fieldID, value); }
    void SetDoubleField(jobject obj, jfieldID fieldID, jdouble value)
    { functions->SetDoubleField(this, obj, fieldID, value); }

    jmethodID GetStaticMethodID(jclass clazz, const char* name, const char* sig)
    { return functions->GetStaticMethodID(this, clazz, name, sig); }
# 764 "../../../../../../../dev/sdk/5.0/s3e/edk/h/jni.h"
    jobject CallStaticObjectMethod(jclass clazz, jmethodID methodID, ...) { jobject result; va_list args; __builtin_va_start(args,methodID); result = functions->CallStaticObjectMethodV(this, clazz, methodID, args); __builtin_va_end(args); return result; } jobject CallStaticObjectMethodV(jclass clazz, jmethodID methodID, va_list args) { return functions->CallStaticObjectMethodV(this, clazz, methodID, args); } jobject CallStaticObjectMethodA(jclass clazz, jmethodID methodID, jvalue* args) { return functions->CallStaticObjectMethodA(this, clazz, methodID, args); }
    jboolean CallStaticBooleanMethod(jclass clazz, jmethodID methodID, ...) { jboolean result; va_list args; __builtin_va_start(args,methodID); result = functions->CallStaticBooleanMethodV(this, clazz, methodID, args); __builtin_va_end(args); return result; } jboolean CallStaticBooleanMethodV(jclass clazz, jmethodID methodID, va_list args) { return functions->CallStaticBooleanMethodV(this, clazz, methodID, args); } jboolean CallStaticBooleanMethodA(jclass clazz, jmethodID methodID, jvalue* args) { return functions->CallStaticBooleanMethodA(this, clazz, methodID, args); }
    jbyte CallStaticByteMethod(jclass clazz, jmethodID methodID, ...) { jbyte result; va_list args; __builtin_va_start(args,methodID); result = functions->CallStaticByteMethodV(this, clazz, methodID, args); __builtin_va_end(args); return result; } jbyte CallStaticByteMethodV(jclass clazz, jmethodID methodID, va_list args) { return functions->CallStaticByteMethodV(this, clazz, methodID, args); } jbyte CallStaticByteMethodA(jclass clazz, jmethodID methodID, jvalue* args) { return functions->CallStaticByteMethodA(this, clazz, methodID, args); }
    jchar CallStaticCharMethod(jclass clazz, jmethodID methodID, ...) { jchar result; va_list args; __builtin_va_start(args,methodID); result = functions->CallStaticCharMethodV(this, clazz, methodID, args); __builtin_va_end(args); return result; } jchar CallStaticCharMethodV(jclass clazz, jmethodID methodID, va_list args) { return functions->CallStaticCharMethodV(this, clazz, methodID, args); } jchar CallStaticCharMethodA(jclass clazz, jmethodID methodID, jvalue* args) { return functions->CallStaticCharMethodA(this, clazz, methodID, args); }
    jshort CallStaticShortMethod(jclass clazz, jmethodID methodID, ...) { jshort result; va_list args; __builtin_va_start(args,methodID); result = functions->CallStaticShortMethodV(this, clazz, methodID, args); __builtin_va_end(args); return result; } jshort CallStaticShortMethodV(jclass clazz, jmethodID methodID, va_list args) { return functions->CallStaticShortMethodV(this, clazz, methodID, args); } jshort CallStaticShortMethodA(jclass clazz, jmethodID methodID, jvalue* args) { return functions->CallStaticShortMethodA(this, clazz, methodID, args); }
    jint CallStaticIntMethod(jclass clazz, jmethodID methodID, ...) { jint result; va_list args; __builtin_va_start(args,methodID); result = functions->CallStaticIntMethodV(this, clazz, methodID, args); __builtin_va_end(args); return result; } jint CallStaticIntMethodV(jclass clazz, jmethodID methodID, va_list args) { return functions->CallStaticIntMethodV(this, clazz, methodID, args); } jint CallStaticIntMethodA(jclass clazz, jmethodID methodID, jvalue* args) { return functions->CallStaticIntMethodA(this, clazz, methodID, args); }
    jlong CallStaticLongMethod(jclass clazz, jmethodID methodID, ...) { jlong result; va_list args; __builtin_va_start(args,methodID); result = functions->CallStaticLongMethodV(this, clazz, methodID, args); __builtin_va_end(args); return result; } jlong CallStaticLongMethodV(jclass clazz, jmethodID methodID, va_list args) { return functions->CallStaticLongMethodV(this, clazz, methodID, args); } jlong CallStaticLongMethodA(jclass clazz, jmethodID methodID, jvalue* args) { return functions->CallStaticLongMethodA(this, clazz, methodID, args); }
    jfloat CallStaticFloatMethod(jclass clazz, jmethodID methodID, ...) { jfloat result; va_list args; __builtin_va_start(args,methodID); result = functions->CallStaticFloatMethodV(this, clazz, methodID, args); __builtin_va_end(args); return result; } jfloat CallStaticFloatMethodV(jclass clazz, jmethodID methodID, va_list args) { return functions->CallStaticFloatMethodV(this, clazz, methodID, args); } jfloat CallStaticFloatMethodA(jclass clazz, jmethodID methodID, jvalue* args) { return functions->CallStaticFloatMethodA(this, clazz, methodID, args); }
    jdouble CallStaticDoubleMethod(jclass clazz, jmethodID methodID, ...) { jdouble result; va_list args; __builtin_va_start(args,methodID); result = functions->CallStaticDoubleMethodV(this, clazz, methodID, args); __builtin_va_end(args); return result; } jdouble CallStaticDoubleMethodV(jclass clazz, jmethodID methodID, va_list args) { return functions->CallStaticDoubleMethodV(this, clazz, methodID, args); } jdouble CallStaticDoubleMethodA(jclass clazz, jmethodID methodID, jvalue* args) { return functions->CallStaticDoubleMethodA(this, clazz, methodID, args); }

    void CallStaticVoidMethod(jclass clazz, jmethodID methodID, ...)
    {
        va_list args;
        __builtin_va_start(args,methodID);
        functions->CallStaticVoidMethodV(this, clazz, methodID, args);
        __builtin_va_end(args);
    }
    void CallStaticVoidMethodV(jclass clazz, jmethodID methodID, va_list args)
    { functions->CallStaticVoidMethodV(this, clazz, methodID, args); }
    void CallStaticVoidMethodA(jclass clazz, jmethodID methodID, jvalue* args)
    { functions->CallStaticVoidMethodA(this, clazz, methodID, args); }

    jfieldID GetStaticFieldID(jclass clazz, const char* name, const char* sig)
    { return functions->GetStaticFieldID(this, clazz, name, sig); }

    jobject GetStaticObjectField(jclass clazz, jfieldID fieldID)
    { return functions->GetStaticObjectField(this, clazz, fieldID); }
    jboolean GetStaticBooleanField(jclass clazz, jfieldID fieldID)
    { return functions->GetStaticBooleanField(this, clazz, fieldID); }
    jbyte GetStaticByteField(jclass clazz, jfieldID fieldID)
    { return functions->GetStaticByteField(this, clazz, fieldID); }
    jchar GetStaticCharField(jclass clazz, jfieldID fieldID)
    { return functions->GetStaticCharField(this, clazz, fieldID); }
    jshort GetStaticShortField(jclass clazz, jfieldID fieldID)
    { return functions->GetStaticShortField(this, clazz, fieldID); }
    jint GetStaticIntField(jclass clazz, jfieldID fieldID)
    { return functions->GetStaticIntField(this, clazz, fieldID); }
    jlong GetStaticLongField(jclass clazz, jfieldID fieldID)
    { return functions->GetStaticLongField(this, clazz, fieldID); }
    jfloat GetStaticFloatField(jclass clazz, jfieldID fieldID)
    { return functions->GetStaticFloatField(this, clazz, fieldID); }
    jdouble GetStaticDoubleField(jclass clazz, jfieldID fieldID)
    { return functions->GetStaticDoubleField(this, clazz, fieldID); }

    void SetStaticObjectField(jclass clazz, jfieldID fieldID, jobject value)
    { functions->SetStaticObjectField(this, clazz, fieldID, value); }
    void SetStaticBooleanField(jclass clazz, jfieldID fieldID, jboolean value)
    { functions->SetStaticBooleanField(this, clazz, fieldID, value); }
    void SetStaticByteField(jclass clazz, jfieldID fieldID, jbyte value)
    { functions->SetStaticByteField(this, clazz, fieldID, value); }
    void SetStaticCharField(jclass clazz, jfieldID fieldID, jchar value)
    { functions->SetStaticCharField(this, clazz, fieldID, value); }
    void SetStaticShortField(jclass clazz, jfieldID fieldID, jshort value)
    { functions->SetStaticShortField(this, clazz, fieldID, value); }
    void SetStaticIntField(jclass clazz, jfieldID fieldID, jint value)
    { functions->SetStaticIntField(this, clazz, fieldID, value); }
    void SetStaticLongField(jclass clazz, jfieldID fieldID, jlong value)
    { functions->SetStaticLongField(this, clazz, fieldID, value); }
    void SetStaticFloatField(jclass clazz, jfieldID fieldID, jfloat value)
    { functions->SetStaticFloatField(this, clazz, fieldID, value); }
    void SetStaticDoubleField(jclass clazz, jfieldID fieldID, jdouble value)
    { functions->SetStaticDoubleField(this, clazz, fieldID, value); }

    jstring NewString(const jchar* unicodeChars, jsize len)
    { return functions->NewString(this, unicodeChars, len); }

    jsize GetStringLength(jstring string)
    { return functions->GetStringLength(this, string); }

    const jchar* GetStringChars(jstring string, jboolean* isCopy)
    { return functions->GetStringChars(this, string, isCopy); }

    void ReleaseStringChars(jstring string, const jchar* chars)
    { functions->ReleaseStringChars(this, string, chars); }

    jstring NewStringUTF(const char* bytes)
    { return functions->NewStringUTF(this, bytes); }

    jsize GetStringUTFLength(jstring string)
    { return functions->GetStringUTFLength(this, string); }

    const char* GetStringUTFChars(jstring string, jboolean* isCopy)
    { return functions->GetStringUTFChars(this, string, isCopy); }

    void ReleaseStringUTFChars(jstring string, const char* utf)
    { functions->ReleaseStringUTFChars(this, string, utf); }

    jsize GetArrayLength(jarray array)
    { return functions->GetArrayLength(this, array); }

    jobjectArray NewObjectArray(jsize length, jclass elementClass,
        jobject initialElement)
    { return functions->NewObjectArray(this, length, elementClass,
        initialElement); }

    jobject GetObjectArrayElement(jobjectArray array, jsize index)
    { return functions->GetObjectArrayElement(this, array, index); }

    void SetObjectArrayElement(jobjectArray array, jsize index, jobject value)
    { functions->SetObjectArrayElement(this, array, index, value); }

    jbooleanArray NewBooleanArray(jsize length)
    { return functions->NewBooleanArray(this, length); }
    jbyteArray NewByteArray(jsize length)
    { return functions->NewByteArray(this, length); }
    jcharArray NewCharArray(jsize length)
    { return functions->NewCharArray(this, length); }
    jshortArray NewShortArray(jsize length)
    { return functions->NewShortArray(this, length); }
    jintArray NewIntArray(jsize length)
    { return functions->NewIntArray(this, length); }
    jlongArray NewLongArray(jsize length)
    { return functions->NewLongArray(this, length); }
    jfloatArray NewFloatArray(jsize length)
    { return functions->NewFloatArray(this, length); }
    jdoubleArray NewDoubleArray(jsize length)
    { return functions->NewDoubleArray(this, length); }

    jboolean* GetBooleanArrayElements(jbooleanArray array, jboolean* isCopy)
    { return functions->GetBooleanArrayElements(this, array, isCopy); }
    jbyte* GetByteArrayElements(jbyteArray array, jboolean* isCopy)
    { return functions->GetByteArrayElements(this, array, isCopy); }
    jchar* GetCharArrayElements(jcharArray array, jboolean* isCopy)
    { return functions->GetCharArrayElements(this, array, isCopy); }
    jshort* GetShortArrayElements(jshortArray array, jboolean* isCopy)
    { return functions->GetShortArrayElements(this, array, isCopy); }
    jint* GetIntArrayElements(jintArray array, jboolean* isCopy)
    { return functions->GetIntArrayElements(this, array, isCopy); }
    jlong* GetLongArrayElements(jlongArray array, jboolean* isCopy)
    { return functions->GetLongArrayElements(this, array, isCopy); }
    jfloat* GetFloatArrayElements(jfloatArray array, jboolean* isCopy)
    { return functions->GetFloatArrayElements(this, array, isCopy); }
    jdouble* GetDoubleArrayElements(jdoubleArray array, jboolean* isCopy)
    { return functions->GetDoubleArrayElements(this, array, isCopy); }

    void ReleaseBooleanArrayElements(jbooleanArray array, jboolean* elems,
        jint mode)
    { functions->ReleaseBooleanArrayElements(this, array, elems, mode); }
    void ReleaseByteArrayElements(jbyteArray array, jbyte* elems,
        jint mode)
    { functions->ReleaseByteArrayElements(this, array, elems, mode); }
    void ReleaseCharArrayElements(jcharArray array, jchar* elems,
        jint mode)
    { functions->ReleaseCharArrayElements(this, array, elems, mode); }
    void ReleaseShortArrayElements(jshortArray array, jshort* elems,
        jint mode)
    { functions->ReleaseShortArrayElements(this, array, elems, mode); }
    void ReleaseIntArrayElements(jintArray array, jint* elems,
        jint mode)
    { functions->ReleaseIntArrayElements(this, array, elems, mode); }
    void ReleaseLongArrayElements(jlongArray array, jlong* elems,
        jint mode)
    { functions->ReleaseLongArrayElements(this, array, elems, mode); }
    void ReleaseFloatArrayElements(jfloatArray array, jfloat* elems,
        jint mode)
    { functions->ReleaseFloatArrayElements(this, array, elems, mode); }
    void ReleaseDoubleArrayElements(jdoubleArray array, jdouble* elems,
        jint mode)
    { functions->ReleaseDoubleArrayElements(this, array, elems, mode); }

    void GetBooleanArrayRegion(jbooleanArray array, jsize start, jsize len,
        jboolean* buf)
    { functions->GetBooleanArrayRegion(this, array, start, len, buf); }
    void GetByteArrayRegion(jbyteArray array, jsize start, jsize len,
        jbyte* buf)
    { functions->GetByteArrayRegion(this, array, start, len, buf); }
    void GetCharArrayRegion(jcharArray array, jsize start, jsize len,
        jchar* buf)
    { functions->GetCharArrayRegion(this, array, start, len, buf); }
    void GetShortArrayRegion(jshortArray array, jsize start, jsize len,
        jshort* buf)
    { functions->GetShortArrayRegion(this, array, start, len, buf); }
    void GetIntArrayRegion(jintArray array, jsize start, jsize len,
        jint* buf)
    { functions->GetIntArrayRegion(this, array, start, len, buf); }
    void GetLongArrayRegion(jlongArray array, jsize start, jsize len,
        jlong* buf)
    { functions->GetLongArrayRegion(this, array, start, len, buf); }
    void GetFloatArrayRegion(jfloatArray array, jsize start, jsize len,
        jfloat* buf)
    { functions->GetFloatArrayRegion(this, array, start, len, buf); }
    void GetDoubleArrayRegion(jdoubleArray array, jsize start, jsize len,
        jdouble* buf)
    { functions->GetDoubleArrayRegion(this, array, start, len, buf); }

    void SetBooleanArrayRegion(jbooleanArray array, jsize start, jsize len,
        const jboolean* buf)
    { functions->SetBooleanArrayRegion(this, array, start, len, buf); }
    void SetByteArrayRegion(jbyteArray array, jsize start, jsize len,
        const jbyte* buf)
    { functions->SetByteArrayRegion(this, array, start, len, buf); }
    void SetCharArrayRegion(jcharArray array, jsize start, jsize len,
        const jchar* buf)
    { functions->SetCharArrayRegion(this, array, start, len, buf); }
    void SetShortArrayRegion(jshortArray array, jsize start, jsize len,
        const jshort* buf)
    { functions->SetShortArrayRegion(this, array, start, len, buf); }
    void SetIntArrayRegion(jintArray array, jsize start, jsize len,
        const jint* buf)
    { functions->SetIntArrayRegion(this, array, start, len, buf); }
    void SetLongArrayRegion(jlongArray array, jsize start, jsize len,
        const jlong* buf)
    { functions->SetLongArrayRegion(this, array, start, len, buf); }
    void SetFloatArrayRegion(jfloatArray array, jsize start, jsize len,
        const jfloat* buf)
    { functions->SetFloatArrayRegion(this, array, start, len, buf); }
    void SetDoubleArrayRegion(jdoubleArray array, jsize start, jsize len,
        const jdouble* buf)
    { functions->SetDoubleArrayRegion(this, array, start, len, buf); }

    jint RegisterNatives(jclass clazz, const JNINativeMethod* methods,
        jint nMethods)
    { return functions->RegisterNatives(this, clazz, methods, nMethods); }

    jint UnregisterNatives(jclass clazz)
    { return functions->UnregisterNatives(this, clazz); }

    jint MonitorEnter(jobject obj)
    { return functions->MonitorEnter(this, obj); }

    jint MonitorExit(jobject obj)
    { return functions->MonitorExit(this, obj); }

    jint GetJavaVM(JavaVM** vm)
    { return functions->GetJavaVM(this, vm); }

    void GetStringRegion(jstring str, jsize start, jsize len, jchar* buf)
    { functions->GetStringRegion(this, str, start, len, buf); }

    void GetStringUTFRegion(jstring str, jsize start, jsize len, char* buf)
    { functions->GetStringUTFRegion(this, str, start, len, buf); }

    void* GetPrimitiveArrayCritical(jarray array, jboolean* isCopy)
    { return functions->GetPrimitiveArrayCritical(this, array, isCopy); }

    void ReleasePrimitiveArrayCritical(jarray array, void* carray, jint mode)
    { functions->ReleasePrimitiveArrayCritical(this, array, carray, mode); }

    const jchar* GetStringCritical(jstring string, jboolean* isCopy)
    { return functions->GetStringCritical(this, string, isCopy); }

    void ReleaseStringCritical(jstring string, const jchar* carray)
    { functions->ReleaseStringCritical(this, string, carray); }

    jweak NewWeakGlobalRef(jobject obj)
    { return functions->NewWeakGlobalRef(this, obj); }

    void DeleteWeakGlobalRef(jweak obj)
    { functions->DeleteWeakGlobalRef(this, obj); }

    jboolean ExceptionCheck()
    { return functions->ExceptionCheck(this); }

    jobject NewDirectByteBuffer(void* address, jlong capacity)
    { return functions->NewDirectByteBuffer(this, address, capacity); }

    void* GetDirectBufferAddress(jobject buf)
    { return functions->GetDirectBufferAddress(this, buf); }

    jlong GetDirectBufferCapacity(jobject buf)
    { return functions->GetDirectBufferCapacity(this, buf); }


    jobjectRefType GetObjectRefType(jobject obj)
    { return functions->GetObjectRefType(this, obj); }

};





struct JNIInvokeInterface {
    void* reserved0;
    void* reserved1;
    void* reserved2;

    jint (*DestroyJavaVM)(JavaVM*);
    jint (*AttachCurrentThread)(JavaVM*, JNIEnv**, void*);
    jint (*DetachCurrentThread)(JavaVM*);
    jint (*GetEnv)(JavaVM*, void**, jint);
    jint (*AttachCurrentThreadAsDaemon)(JavaVM*, JNIEnv**, void*);
};




struct _JavaVM {
    const struct JNIInvokeInterface* functions;


    jint DestroyJavaVM()
    { return functions->DestroyJavaVM(this); }
    jint AttachCurrentThread(JNIEnv** p_env, void* thr_args)
    { return functions->AttachCurrentThread(this, p_env, thr_args); }
    jint DetachCurrentThread()
    { return functions->DetachCurrentThread(this); }
    jint GetEnv(void** env, jint version)
    { return functions->GetEnv(this, env, version); }
    jint AttachCurrentThreadAsDaemon(JNIEnv** p_env, void* thr_args)
    { return functions->AttachCurrentThreadAsDaemon(this, p_env, thr_args); }

};

struct JavaVMAttachArgs {
    jint version;
    const char* name;
    jobject group;
};
typedef struct JavaVMAttachArgs JavaVMAttachArgs;





typedef struct JavaVMOption {
    const char* optionString;
    void* extraInfo;
} JavaVMOption;

typedef struct JavaVMInitArgs {
    jint version;

    jint nOptions;
    JavaVMOption* options;
    jboolean ignoreUnrecognized;
} JavaVMInitArgs;


extern "C" {






jint JNI_GetDefaultJavaVMInitArgs(void*);
jint JNI_CreateJavaVM(JavaVM**, JNIEnv**, void*);
jint JNI_GetCreatedJavaVMs(JavaVM**, jsize, jsize*);





jint JNI_OnLoad(JavaVM* vm, void* reserved);
void JNI_OnUnload(JavaVM* vm, void* reserved);


}
# 21 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk_android.h" 2
# 38 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk_android.h"
extern "C" void* s3eEdkJNIGetVM();






static inline JNIEnv* s3eEdkJNIGetEnv()
{
    JavaVM* jvm = (JavaVM*)s3eEdkJNIGetVM();
    void* rtn = __null;
    jvm->GetEnv(&rtn, 0x00010002);
    return (JNIEnv*)rtn;
}





static inline jclass s3eEdkAndroidFindClass_real(const char* classname)
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    return env->FindClass(classname);
}
# 73 "../../../../../../../dev/sdk/5.0/s3e/edk/h/s3eEdk_android.h"
static inline jclass s3eEdkAndroidFindClass(const char* classname)
{
    return (jclass)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eEdkAndroidFindClass_real, 1, classname);
}
# 13 "C:\\users\\rlezama\\desktop\\airplay\\tapjoyconnectairplaysampleproj\\s3etapjoy\\source\\android\\s3eTapjoy_platform.cpp" 2
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3e.h" 1
# 19 "../../../../../../../dev/sdk/5.0/s3e/h/s3e.h"
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAccelerometer.h" 1
# 15 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAccelerometer.h"
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eTypes.h" 1
# 16 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAccelerometer.h" 2
# 64 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAccelerometer.h"
typedef enum s3eAccelerometerError
{
    S3E_ACCELEROMETER_ERR_NONE = 0,
    S3E_ACCELEROMETER_ERR_PARAM = 1,
    S3E_ACCELEROMETER_ERR_UNAVAIL = 5
} s3eAccelerometerError;







extern "C" s3eAccelerometerError s3eAccelerometerGetError();
# 86 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAccelerometer.h"
extern "C" const char* s3eAccelerometerGetErrorString();






typedef enum s3eAccelerometerProperty
{
    S3E_ACCELEROMETER_AVAILABLE = 0
} s3eAccelerometerProperty;

extern "C" int32 s3eAccelerometerGetInt(s3eAccelerometerProperty property);
# 108 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAccelerometer.h"
extern "C" s3eResult s3eAccelerometerStart();







extern "C" void s3eAccelerometerStop();






extern "C" int32 s3eAccelerometerGetX();






extern "C" int32 s3eAccelerometerGetY();






extern "C" int32 s3eAccelerometerGetZ();
# 20 "../../../../../../../dev/sdk/5.0/s3e/h/s3e.h" 2
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAudio.h" 1
# 48 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAudio.h"
typedef enum s3eAudioCodec
{
    S3E_AUDIO_CODEC_MIDI = 1,
    S3E_AUDIO_CODEC_MP3 = 2,
    S3E_AUDIO_CODEC_AAC = 3,
    S3E_AUDIO_CODEC_AACPLUS = 4,
    S3E_AUDIO_CODEC_QCP = 5,
    S3E_AUDIO_CODEC_PCM = 6,
    S3E_AUDIO_CODEC_SPF = 7,
    S3E_AUDIO_CODEC_AMR = 8,
    S3E_AUDIO_CODEC_MP4 = 9
} s3eAudioCodec;






typedef enum s3eAudioStatus
{





    S3E_AUDIO_STOPPED = 0,




    S3E_AUDIO_PLAYING = 1,




    S3E_AUDIO_PAUSED = 2,
# 92 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAudio.h"
    S3E_AUDIO_FAILED = 3
} s3eAudioStatus;
# 102 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAudio.h"
typedef enum s3eAudioProperty
{





    S3E_AUDIO_VOLUME = 0,





    S3E_AUDIO_STATUS = 1,





    S3E_AUDIO_POSITION = 2,
# 134 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAudio.h"
    S3E_AUDIO_VOLUME_DEFAULT = 3,





    S3E_AUDIO_CHANNEL = 4,





    S3E_AUDIO_NUM_CHANNELS = 5,

    S3E_AUDIO_AVAILABLE = 6,







    S3E_AUDIO_MUTES_S3ESOUND = 7
} s3eAudioProperty;
# 176 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAudio.h"
extern "C" int32 s3eAudioGetInt(s3eAudioProperty property);
# 196 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAudio.h"
extern "C" s3eResult s3eAudioSetInt(s3eAudioProperty property, int32 value);
# 206 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAudio.h"
typedef enum s3eAudioCallback
{
# 226 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAudio.h"
    S3E_AUDIO_STOP = 2,

    S3E_AUDIO_CALLBACK_MAX
} s3eAudioCallback;






typedef struct s3eAudioCallbackData
{

    uint32 m_ChannelID;
} s3eAudioCallbackData;
# 265 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAudio.h"
extern "C" s3eResult s3eAudioRegister(s3eAudioCallback cbid, s3eCallback fn, void* userData);
# 281 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAudio.h"
extern "C" s3eResult s3eAudioUnRegister(s3eAudioCallback cbid, s3eCallback fn);
# 290 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAudio.h"
typedef enum s3eAudioError
{
    S3E_AUDIO_ERR_NONE = 0,
    S3E_AUDIO_ERR_PARAM = 1,
    S3E_AUDIO_ERR_TOO_MANY = 2,
    S3E_AUDIO_ERR_ALREADY_REG = 3,
    S3E_AUDIO_ERR_NOT_FOUND = 4,
    S3E_AUDIO_ERR_UNAVAIL = 5,
    S3E_AUDIO_ERR_DEVICE = 6,
    S3E_AUDIO_ERR_UNSUPPORTED = 7,
    S3E_AUDIO_ERR_MEM = 8,
    S3E_AUDIO_ERR_INVALID_DRIVE = 10,
    S3E_AUDIO_ERR_INVALID_PATH = 11,
    S3E_AUDIO_ERR_FILEFORMAT = 1000,
    S3E_AUDIO_ERR_WRONG_STATE = 1001
} s3eAudioError;
# 319 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAudio.h"
extern "C" s3eAudioError s3eAudioGetError();
# 333 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAudio.h"
extern "C" const char* s3eAudioGetErrorString();
# 408 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAudio.h"
extern "C" s3eResult s3eAudioPlay(const char* filename, uint32 repeatCount);
# 479 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAudio.h"
extern "C" s3eResult s3eAudioPlayFromBuffer(void* buffer, uint32 bufferLen, uint32 repeatCount);
# 504 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAudio.h"
extern "C" s3eResult s3eAudioPause();
# 523 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAudio.h"
extern "C" s3eResult s3eAudioResume();
# 537 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAudio.h"
extern "C" void s3eAudioStop();
# 548 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAudio.h"
extern "C" s3eBool s3eAudioIsPlaying();
# 562 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAudio.h"
extern "C" s3eBool s3eAudioIsCodecSupported(s3eAudioCodec codec);






# 1 "../../../../../../../dev/sdk/5.0/s3e/h/legacy/s3eAudio_legacy.h" 1
# 570 "../../../../../../../dev/sdk/5.0/s3e/h/s3eAudio.h" 2
# 21 "../../../../../../../dev/sdk/5.0/s3e/h/s3e.h" 2
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eCompression.h" 1
# 33 "../../../../../../../dev/sdk/5.0/s3e/h/s3eCompression.h"
typedef enum s3eCompressionAlgorithms
{
    S3E_COMPRESSION_ALG_AUTO = 0,
    S3E_COMPRESSION_ALG_NONE = 1,







    S3E_COMPRESSION_ALG_ZLIB = 2,







    S3E_COMPRESSION_ALG_GZIP = 3,





    S3E_COMPRESSION_ALG_LZMA = 4,

    S3E_COMPRESSION_ALG_MAX
} s3eCompressionAlgorithms;






typedef enum s3eCompressionError
{
    S3E_COMPRESSION_ERR_NONE = 0,
    S3E_COMPRESSION_ERR_PARAM = 1,
    S3E_COMPRESSION_ERR_TOO_MANY = 2,
    S3E_COMPRESSION_ERR_DEVICE = 6,
    S3E_COMPRESSION_ERR_MEM = 8,

    S3E_COMPRESSION_ERR_BAD_DATA = 1000,
    S3E_COMPRESSION_ERR_INSUFF = 1002
} s3eCompressionError;





typedef struct s3eDecompressionHandle s3eDecompressionHandle;
# 95 "../../../../../../../dev/sdk/5.0/s3e/h/s3eCompression.h"
typedef struct s3eDecompressionInput
{

    void* m_Data;

    int32 m_Size;
} s3eDecompressionInput;
# 137 "../../../../../../../dev/sdk/5.0/s3e/h/s3eCompression.h"
extern "C" s3eDecompressionHandle* s3eCompressionDecompInit(s3eCompressionAlgorithms alg, s3eCallback inputFn, void* userData);
# 190 "../../../../../../../dev/sdk/5.0/s3e/h/s3eCompression.h"
extern "C" s3eResult s3eCompressionDecompRead(s3eDecompressionHandle* handle, void* bufferOut, uint32* lenOut);
# 210 "../../../../../../../dev/sdk/5.0/s3e/h/s3eCompression.h"
extern "C" s3eResult s3eCompressionDecompFinal(s3eDecompressionHandle* handle);
# 260 "../../../../../../../dev/sdk/5.0/s3e/h/s3eCompression.h"
extern "C" s3eResult s3eCompressionDecomp(void* bufferIn, uint32 lenIn, void** bufferOut, uint32 *lenOut, s3eCompressionAlgorithms algorithm);
# 273 "../../../../../../../dev/sdk/5.0/s3e/h/s3eCompression.h"
extern "C" s3eCompressionError s3eCompressionGetError();
# 286 "../../../../../../../dev/sdk/5.0/s3e/h/s3eCompression.h"
extern "C" const char* s3eCompressionGetErrorString();
# 22 "../../../../../../../dev/sdk/5.0/s3e/h/s3e.h" 2
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eConfig.h" 1
# 16 "../../../../../../../dev/sdk/5.0/s3e/h/s3eConfig.h"
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h" 1
# 35 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
typedef struct s3eFile s3eFile;
# 56 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
typedef enum s3eFilePath
{
    S3E_FILEPATH_ROM,
    S3E_FILEPATH_RAM,
    S3E_FILEPATH_MMC,
    S3E_FILEPATH_MAX
} s3eFilePath;






typedef enum s3eFileSeekOrigin
{
    S3E_FILESEEK_SET = 0,
    S3E_FILESEEK_CUR = 1,
    S3E_FILESEEK_END = 2
} s3eFileSeekOrigin;




typedef struct s3eFileList s3eFileList;
# 100 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
typedef enum s3eFileProperty
{





    S3E_FILE_ROM_EXISTS = 1,





    S3E_FILE_BYTES_TOTAL = 2,




    S3E_FILE_BYTES_FREE = 3
} s3eFileProperty;
# 129 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
typedef enum s3eFileStats
{







    S3E_FILE_ISFILE = 0,







    S3E_FILE_ISDIR = 1,






    S3E_FILE_ISUSER = 2,
# 166 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
    S3E_FILE_ISWRITABLE = 3,





    S3E_FILE_SIZE = 4,
# 182 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
    S3E_FILE_MODIFIED_DATE = 5,
# 194 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
    S3E_FILE_DRIVE_BYTES_FREE = 6,
# 203 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
    S3E_FILE_DRIVE = 7,
# 212 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
    S3E_FILE_DRIVE_BYTES_TOTAL = 8
} s3eFileStats;
# 230 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" int32 s3eFileGetInt(s3eFileProperty property);
# 252 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" int64 s3eFileGetFileInt(const char* filename, s3eFileStats stat);
# 274 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" char* s3eFileGetFileString(const char* filename, s3eFileStats stat, char* str, int len);
# 283 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
typedef enum s3eFileError
{
    S3E_FILE_ERR_NONE = 0,
    S3E_FILE_ERR_PARAM = 1,
    S3E_FILE_ERR_TOO_MANY = 2,
    S3E_FILE_ERR_ALREADY_REG = 3,
    S3E_FILE_ERR_NOT_FOUND = 4,
    S3E_FILE_ERR_UNAVAIL = 5,
    S3E_FILE_ERR_DEVICE = 6,
    S3E_FILE_ERR_UNSUPPORTED = 7,
    S3E_FILE_ERR_MEM = 8,
    S3E_FILE_ERR_GENERIC = 9,
    S3E_FILE_ERR_INVALID_DRIVE = 10,
    S3E_FILE_ERR_INVALID_PATH = 11,
    S3E_FILE_ERR_DATA = 12,

    S3E_FILE_ERR_INVALID_MODE = 1000,
    S3E_FILE_ERR_EXISTS = 1001,
    S3E_FILE_ERR_NOT_EMPTY = 1002,
    S3E_FILE_ERR_ACCESS = 1003,
    S3E_FILE_ERR_NO_MORE = 1004,
    S3E_FILE_ERR_EOF = 1005
} s3eFileError;
# 318 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" s3eFileError s3eFileGetError();
# 332 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" const char* s3eFileGetErrorString();
# 380 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" s3eFile* s3eFileOpen(const char* filename, const char* mode);
# 398 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" s3eFile* s3eFileOpenFromMemory(void* buffer, uint32 bufferLen);
# 414 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileClose(s3eFile* file);
# 433 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileFlush(s3eFile* file);
# 463 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" uint32 s3eFileRead(void* buffer, uint32 elemSize, uint32 noElems, s3eFile* file);
# 489 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" uint32 s3eFileWrite(const void* buffer, uint32 elemSize, uint32 noElems, s3eFile* file);
# 503 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" int s3eFilePrintf(s3eFile* f, const char *fmt, ...);
# 522 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" int32 s3eFileGetChar(s3eFile* file);
# 543 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" int32 s3eFilePutChar(char c, s3eFile* file);
# 580 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" char* s3eFileReadString(char* string, uint32 maxLen, s3eFile* file);
# 601 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" s3eBool s3eFileEOF(s3eFile* file);
# 634 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileSeek(s3eFile* file, int32 offset, s3eFileSeekOrigin origin);
# 650 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" int32 s3eFileTell(s3eFile* file);
# 666 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" int32 s3eFileGetSize(s3eFile* file);
# 688 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileMakeDirectory(const char* dirName);
# 708 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileDeleteDirectory(const char* dirName);
# 724 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" s3eBool s3eFileCheckExists(const char* filename);
# 754 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileRename(const char* src, const char* dest);
# 775 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileDelete(const char* filename);
# 799 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileTruncate(const char* filename, uint32 length);
# 809 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" uint64 s3eFileGetLastWriteTime(const char* filename);
# 835 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" s3eFileList* s3eFileListDirectory(const char* dirName);
# 856 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileListNext(s3eFileList* handle, char* filename, int filenameLen);
# 870 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileListClose(s3eFileList* handle);
# 881 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" uint64 s3eFileGetFree(s3eFilePath path);






typedef struct s3eUsrFile s3eUsrFile;
# 898 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
typedef s3eUsrFile*(*s3eUserOpenFn)(const char* filename, const char *mode);
# 910 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
typedef uint32 (*s3eUserReadFn)(void* buffer, uint32 elemLen, uint32 noElems, s3eUsrFile *file);
# 922 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
typedef uint32 (*s3eUserWriteFn)(const void* buffer, uint32 elemLen, uint32 noElems, s3eUsrFile *file);
# 931 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
typedef s3eBool (*s3eUserEOFFn)(s3eUsrFile* file);
# 942 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
typedef s3eResult (*s3eUserSeekFn)(s3eUsrFile* file, int32 offset, s3eFileSeekOrigin origin);
# 951 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
typedef int32 (*s3eUserTellFn)(s3eUsrFile* file);
# 960 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
typedef s3eResult (*s3eUserCloseFn)(s3eUsrFile* file);




typedef struct s3eUsrFileList s3eUsrFileList;
# 974 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
typedef s3eUsrFileList* (*s3eUserListDirFn)(const char* path);
# 987 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
typedef s3eResult (*s3eUserListNextFn)(s3eUsrFileList* handle, char* filename, int filenameLen);
# 996 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
typedef s3eResult (*s3eUserListCloseFn)(s3eUsrFileList* handle);
# 1005 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
typedef s3eResult (*s3eUserDeleteFn)(const char* filename);
# 1042 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
typedef struct
{
    s3eUserOpenFn m_Open;
    s3eUserReadFn m_Read;
    s3eUserEOFFn m_EOF;
    s3eUserSeekFn m_Seek;
    s3eUserTellFn m_Tell;
    s3eUserCloseFn m_Close;

    s3eUserListDirFn m_ListDir;
    s3eUserListNextFn m_ListNext;
    s3eUserListCloseFn m_ListClose;

    s3eUserWriteFn m_Write;
    s3eUserDeleteFn m_Delete;

    void* m_Reserved[5];
} s3eFileUserCallbacks;
# 1073 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileAddUserFileSys(s3eFileUserCallbacks* callbacks);
# 1083 "../../../../../../../dev/sdk/5.0/s3e/h/s3eFile.h"
extern "C" s3eResult s3eFileRemoveUserFileSys(s3eFileUserCallbacks* callbacks);
# 17 "../../../../../../../dev/sdk/5.0/s3e/h/s3eConfig.h" 2
# 39 "../../../../../../../dev/sdk/5.0/s3e/h/s3eConfig.h"
typedef enum s3eConfigError
{
    S3E_CONFIG_ERR_NONE = 0,
    S3E_CONFIG_ERR_PARAM = 1,

    S3E_CONFIG_ERR_NOT_FOUND = 4,

    S3E_CONFIG_ERR_PARSE = 6
} s3eConfigError;
# 67 "../../../../../../../dev/sdk/5.0/s3e/h/s3eConfig.h"
extern "C" s3eConfigError s3eConfigGetError();
# 81 "../../../../../../../dev/sdk/5.0/s3e/h/s3eConfig.h"
extern "C" const char* s3eConfigGetErrorString();
# 104 "../../../../../../../dev/sdk/5.0/s3e/h/s3eConfig.h"
extern "C" s3eResult s3eConfigGetString(const char* group, const char* name, char* value);

extern "C" s3eResult s3eConfigGetStringHash(uint32 hash, char* value);
# 133 "../../../../../../../dev/sdk/5.0/s3e/h/s3eConfig.h"
extern "C" s3eResult s3eConfigGetInt(const char* group, const char* name, int* value);

extern "C" s3eResult s3eConfigGetIntHash(uint32 hash, int* value);
# 23 "../../../../../../../dev/sdk/5.0/s3e/h/s3e.h" 2
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eCrypto.h" 1
# 33 "../../../../../../../dev/sdk/5.0/s3e/h/s3eCrypto.h"
typedef struct s3eSHA1 s3eSHA1;
# 42 "../../../../../../../dev/sdk/5.0/s3e/h/s3eCrypto.h"
typedef enum s3eCryptoError
{
    S3E_CRYPTO_ERR_NONE = 0,
    S3E_CRYPTO_ERR_PARAM = 1,
    S3E_CRYPTO_ERR_TOO_MANY = 2,
    S3E_CRYPTO_ERR_DEVICE = 6,


    S3E_CRYPTO_ERR_INVALID_SIG = 1000,
    S3E_CRYPTO_ERR_SIG_CHECK = 1001
} s3eCryptoError;
# 68 "../../../../../../../dev/sdk/5.0/s3e/h/s3eCrypto.h"
extern "C" uint32 s3eCryptoRand();
# 84 "../../../../../../../dev/sdk/5.0/s3e/h/s3eCrypto.h"
extern "C" s3eResult s3eCryptoSha1(const uint8* data, uint32 dataLen, uint8* hash);
# 100 "../../../../../../../dev/sdk/5.0/s3e/h/s3eCrypto.h"
extern "C" s3eSHA1* s3eCryptoSha1Init();
# 117 "../../../../../../../dev/sdk/5.0/s3e/h/s3eCrypto.h"
extern "C" s3eResult s3eCryptoSha1Update(s3eSHA1* ctx, const uint8* data, uint32 dataLen);
# 133 "../../../../../../../dev/sdk/5.0/s3e/h/s3eCrypto.h"
extern "C" s3eResult s3eCryptoSha1Final(s3eSHA1* ctx, uint8* hash);
# 150 "../../../../../../../dev/sdk/5.0/s3e/h/s3eCrypto.h"
extern "C" s3eResult s3eCryptoVerifyRsa(uint8* sig, int sigLen,
                                     uint8* hash, int hashLen,
                                     uint8* mod, int modLen,
                                     uint8* exp, int expLen);
# 166 "../../../../../../../dev/sdk/5.0/s3e/h/s3eCrypto.h"
extern "C" s3eCryptoError s3eCryptoGetError();
# 180 "../../../../../../../dev/sdk/5.0/s3e/h/s3eCrypto.h"
extern "C" const char* s3eCryptoGetErrorString();
# 24 "../../../../../../../dev/sdk/5.0/s3e/h/s3e.h" 2
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDebug.h" 1
# 38 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDebug.h"
typedef enum s3eDebugProperty
{



    S3E_DEBUG_TRACE_ENABLED = 0,





    S3E_DEBUG_TRACE_TO_FILE = 1,




    S3E_DEBUG_ASSERT_ENABLED = 2,





    S3E_DEBUG_AVAILABLE = 3,




    S3E_DEBUG_FONT_SCALE = 4,




    S3E_DEBUG_FONT_WIDTH = 5,




    S3E_DEBUG_FONT_HEIGHT = 6

} s3eDebugProperty;
# 96 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDebug.h"
extern "C" int32 s3eDebugGetInt(s3eDebugProperty property);
# 115 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDebug.h"
extern "C" s3eResult s3eDebugSetInt(s3eDebugProperty property, int32 value);







typedef enum s3eDebugCallback
{
# 139 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDebug.h"
    S3E_DEBUG_ASSERT = 0,
# 154 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDebug.h"
    S3E_DEBUG_ERROR = 1,

    S3E_DEBUG_CALLBACK_MAX
} s3eDebugCallback;
# 185 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDebug.h"
extern "C" s3eResult s3eDebugRegister(s3eDebugCallback cbid, s3eCallback fn, void* userData);
# 202 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDebug.h"
extern "C" s3eResult s3eDebugUnRegister(s3eDebugCallback cbid, s3eCallback fn);
# 211 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDebug.h"
typedef enum s3eDebugError
{
    S3E_DEBUG_ERR_NONE = 0,
    S3E_DEBUG_ERR_PARAM = 1,
    S3E_DEBUG_ERR_TOO_MANY = 2,
    S3E_DEBUG_ERR_ALREADY_REG = 3,
    S3E_DEBUG_ERR_NOT_FOUND = 4
} s3eDebugError;
# 231 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDebug.h"
extern "C" s3eDebugError s3eDebugGetError();
# 244 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDebug.h"
extern "C" const char* s3eDebugGetErrorString();

typedef enum s3eErrorShowResult
{

    S3E_ERROR_SHOW_CONTINUE = 0,

    S3E_ERROR_SHOW_STOP = 1,

    S3E_ERROR_SHOW_IGNORE = 2,


    S3E_ERROR_SHOW_AGAIN = 3
} s3eErrorShowResult;




typedef enum s3eMessageType
{





    S3E_MESSAGE_CONTINUE = 0,





    S3E_MESSAGE_CONTINUE_STOP = 1,






    S3E_MESSAGE_CONTINUE_STOP_IGNORE = 2
} s3eMessageType;







extern "C" s3eBool s3eDebugIsDebuggerPresent();
# 307 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDebug.h"
extern "C" void s3eDebugOutputString(const char* pStr);
# 319 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDebug.h"
extern "C" s3eErrorShowResult s3eDebugErrorShow(s3eMessageType type, const char* string);






extern "C" s3eErrorShowResult s3eDebugErrorPrintf(const char* fmt, ...)

__attribute__((format(printf, 1, 2)))

;
# 344 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDebug.h"
extern "C" s3eErrorShowResult s3eDebugAssertShow(s3eMessageType type, const char* string);
# 357 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDebug.h"
extern "C" void s3eDebugTraceLine(const char* string);






extern "C" int s3eDebugTracePrintf(const char* fmt, ...)

__attribute__((format(printf, 1, 2)))

;






extern "C" void s3eDebugTraceClearFile();
# 384 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDebug.h"
extern "C" void s3eDebugTraceFlush();
# 409 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDebug.h"
extern "C" void s3eDebugPrint(int x, int y, const char* string, s3eBool wrap);






extern "C" void s3eDebugPrintf(int x, int y, s3eBool wrap, const char* fmt, ...)

__attribute__((format(printf, 4, 5)))

;







extern "C" s3eBool s3eDebugTraceChannelSwitch(const char* channel, s3eBool new_state);
# 25 "../../../../../../../dev/sdk/5.0/s3e/h/s3e.h" 2
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h" 1
# 39 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
typedef enum s3eDeviceError
{
    S3E_DEVICE_ERR_NONE = 0,
    S3E_DEVICE_ERR_PARAM = 1,
    S3E_DEVICE_ERR_TOO_MANY = 2,
    S3E_DEVICE_ERR_ALREADY_REG = 3,
    S3E_DEVICE_ERR_NOT_FOUND = 4,
    S3E_DEVICE_ERR_UNAVAIL = 5,
    S3E_DEVICE_ERR_DEVICE = 6,
    S3E_DEVICE_ERR_UNSUPPORTED = 7,
    S3E_DEVICE_ERR_MEM = 8,
    S3E_DEVICE_ERR_GENERIC = 9,
    S3E_DEVICE_ERR_INVALID_DRIVE = 10,
    S3E_DEVICE_ERR_INVALID_PATH = 11
} s3eDeviceError;
# 66 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
extern "C" s3eDeviceError s3eDeviceGetError();
# 80 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
extern "C" const char* s3eDeviceGetErrorString();






typedef enum s3eDeviceProperty
{







    S3E_DEVICE_OS = 0,





    S3E_DEVICE_CLASS = 1,
# 113 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
    S3E_DEVICE_ID = 2,





    S3E_DEVICE_PHONE_NUMBER = 3,





    S3E_DEVICE_LANGUAGE = 4,






    S3E_DEVICE_STATE = 5,




    S3E_DEVICE_FREE_RAM = 6,




    S3E_DEVICE_TOTAL_RAM = 7,







    S3E_DEVICE_ARCHITECTURE = 8,
# 160 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
    S3E_DEVICE_S3E_VERSION = 9,





    S3E_DEVICE_BATTERY_LEVEL = 10,






    S3E_DEVICE_LEFT_SOFTKEY_IS_BACK = 11,






    S3E_DEVICE_MAINS_POWER = 12,
# 189 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
    S3E_DEVICE_OS_VERSION = 13,





    S3E_DEVICE_CHIPSET = 14,
# 204 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
    S3E_DEVICE_EXIT_CODE = 15,





    S3E_DEVICE_FPU = 16,





    S3E_DEVICE_BACK_SOFTKEY_POSITION = 17,





    S3E_DEVICE_ADVANCE_SOFTKEY_POSITION = 18,
# 233 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
    S3E_DEVICE_SDK_VERSION = 19,
# 242 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
    S3E_DEVICE_LOCALE = 20,





    S3E_DEVICE_NAME = 21,







    S3E_DEVICE_SUPPORTS_SIGNAL_HANDLING = 22,







    S3E_DEVICE_EXIT_SIGNAL = 23,







    S3E_DEVICE_PROXIMITY = 24,
# 286 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
    S3E_DEVICE_UNIQUE_ID = 25,
# 296 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
    S3E_DEVICE_IMSI = 26,





    S3E_DEVICE_SILENT_MODE = 27,




    S3E_DEVICE_NUM_CPU_CORES = 28,




    S3E_DEVICE_MEM_TOTAL = 29,






    S3E_DEVICE_MEM_FREE = 30
} s3eDeviceProperty;






typedef enum s3eDeviceOSID
{

    S3E_OS_ID_SYMBIAN = 1,

    S3E_OS_ID_BREW = 2,

    S3E_OS_ID_WINDOWS = 3,

    S3E_OS_ID_WINMOBILE = 4,

    S3E_OS_ID_LINUX = 5,

    S3E_OS_ID_WIPI = 6,

    S3E_OS_ID_NDS = 7,

    S3E_OS_ID_ARM_SEMIH = 8,

    S3E_OS_ID_NUCLEUS = 9,

    S3E_OS_ID_NGI = 10,

    S3E_OS_ID_WINCE = 11,

    S3E_OS_ID_SHARPEMP = 12,

    S3E_OS_ID_OSX = 13,

    S3E_OS_ID_IPHONE = 14,

    S3E_OS_ID_UIQ = 15,

    S3E_OS_ID_PS3 = 16,

    S3E_OS_ID_X360 = 17,

    S3E_OS_ID_BADA = 18,

    S3E_OS_ID_ANDROID = 19,

    S3E_OS_ID_WEBOS = 20,

    S3E_OS_ID_PSP = 21,

    S3E_OS_ID_WII = 22,

    S3E_OS_ID_MEEGO = 23,


    S3E_OS_ID_QNX = 24
} s3eDeviceOSID;






typedef enum s3eDeviceClassID
{
    S3E_DEVICE_CLASS_UNKNOWN = 0,

    S3E_DEVICE_CLASS_SYMBIAN_GENERIC = 1000,
    S3E_DEVICE_CLASS_SYMBIAN_SERIES60 = 1001,
    S3E_DEVICE_CLASS_SYMBIAN_SERIES60_EMULATOR = 1002,
    S3E_DEVICE_CLASS_SYMBIAN_UIQ = 1003,
    S3E_DEVICE_CLASS_SYMBIAN_UIQ_EMULATOR = 1004,

    S3E_DEVICE_CLASS_BREW_GENERIC = 2000,
    S3E_DEVICE_CLASS_BREW_QCIF_3G = 2001,
    S3E_DEVICE_CLASS_BREW_QCIF_25G = 2002,
    S3E_DEVICE_CLASS_BREW_SQCIF_25G = 2003,
    S3E_DEVICE_CLASS_BREW_QVGA_3G = 2004,

    S3E_DEVICE_CLASS_WINDOWS_GENERIC = 3000,

    S3E_DEVICE_CLASS_WINCE_GENERIC = 4000,
    S3E_DEVICE_CLASS_WINMOBILE_SP = 4001,
    S3E_DEVICE_CLASS_WINMOBILE_PPC = 4002,

    S3E_DEVICE_CLASS_LINUX_GENERIC = 5000,
    S3E_DEVICE_CLASS_LINUX_DESKTOP = 5001,
    S3E_DEVICE_CLASS_LINUX_EMBED = 5002,

    S3E_DEVICE_CLASS_WIPI_GENERIC = 6000,

    S3E_DEVICE_CLASS_NDS_GENERIC = 7000,
    S3E_DEVICE_CLASS_NDS_NDSI = 7001,

    S3E_DEVICE_CLASS_ARM_SEMIH_GENERIC = 8000,

    S3E_DEVICE_CLASS_NUCLEUS_GENERIC = 9000,

    S3E_DEVICE_CLASS_NGI_GENERIC = 10000,

    S3E_DEVICE_CLASS_OSX_DESKTOP = 11000,

    S3E_DEVICE_CLASS_IPHONE = 12000,

    S3E_DEVICE_CLASS_PS3 = 13000,
    S3E_DEVICE_CLASS_X360 = 14000,
    S3E_DEVICE_CLASS_BADA_GENERIC = 15000,
    S3E_DEVICE_CLASS_ANDROID_GENERIC = 16000,
    S3E_DEVICE_CLASS_PSP = 17000,
    S3E_DEVICE_CLASS_WII = 18000,
    S3E_DEVICE_CLASS_QNX = 19000
} s3eDeviceClassID;




typedef enum s3eDeviceLanguage
{
    S3E_DEVICE_LANGUAGE_UNKNOWN = 0,
    S3E_DEVICE_LANGUAGE_ENGLISH = 1,
    S3E_DEVICE_LANGUAGE_FRENCH = 2,
    S3E_DEVICE_LANGUAGE_GERMAN = 3,
    S3E_DEVICE_LANGUAGE_SPANISH = 4,
    S3E_DEVICE_LANGUAGE_ITALIAN = 5,
    S3E_DEVICE_LANGUAGE_PORTUGUESE = 6,
    S3E_DEVICE_LANGUAGE_DUTCH = 7,
    S3E_DEVICE_LANGUAGE_TURKISH = 8,
    S3E_DEVICE_LANGUAGE_CROATIAN = 9,
    S3E_DEVICE_LANGUAGE_CZECH = 10,
    S3E_DEVICE_LANGUAGE_DANISH = 11,
    S3E_DEVICE_LANGUAGE_FINNISH = 12,
    S3E_DEVICE_LANGUAGE_HUNGARIAN = 13,
    S3E_DEVICE_LANGUAGE_NORWEGIAN = 14,
    S3E_DEVICE_LANGUAGE_POLISH = 15,
    S3E_DEVICE_LANGUAGE_RUSSIAN = 16,
    S3E_DEVICE_LANGUAGE_SERBIAN = 17,
    S3E_DEVICE_LANGUAGE_SLOVAK = 18,
    S3E_DEVICE_LANGUAGE_SLOVENIAN = 19,
    S3E_DEVICE_LANGUAGE_SWEDISH = 20,
    S3E_DEVICE_LANGUAGE_UKRAINIAN = 21,
    S3E_DEVICE_LANGUAGE_GREEK = 22,
    S3E_DEVICE_LANGUAGE_JAPANESE = 23,
    S3E_DEVICE_LANGUAGE_SIMPL_CHINESE = 24,
    S3E_DEVICE_LANGUAGE_TRAD_CHINESE = 25,
    S3E_DEVICE_LANGUAGE_KOREAN = 26,
    S3E_DEVICE_LANGUAGE_ICELANDIC = 27,
    S3E_DEVICE_LANGUAGE_FLEMISH = 28,
    S3E_DEVICE_LANGUAGE_THAI = 29,
    S3E_DEVICE_LANGUAGE_AFRIKAANS = 30,
    S3E_DEVICE_LANGUAGE_ALBANIAN = 31,
    S3E_DEVICE_LANGUAGE_AMHARIC = 32,
    S3E_DEVICE_LANGUAGE_ARABIC = 33,
    S3E_DEVICE_LANGUAGE_ARMENIAN = 34,
    S3E_DEVICE_LANGUAGE_AZERBAIJANI = 35,
    S3E_DEVICE_LANGUAGE_TAGALOG = 36,
    S3E_DEVICE_LANGUAGE_BELARUSSIAN = 37,
    S3E_DEVICE_LANGUAGE_BENGALI = 38,
    S3E_DEVICE_LANGUAGE_BULGARIAN = 39,
    S3E_DEVICE_LANGUAGE_BURMESE = 40,
    S3E_DEVICE_LANGUAGE_CATALAN = 41,
    S3E_DEVICE_LANGUAGE_ESTONIAN = 42,
    S3E_DEVICE_LANGUAGE_FARSI = 43,
    S3E_DEVICE_LANGUAGE_GAELIC = 44,
    S3E_DEVICE_LANGUAGE_GEORGIAN = 45,
    S3E_DEVICE_LANGUAGE_GUJARATI = 46,
    S3E_DEVICE_LANGUAGE_HEBREW = 47,
    S3E_DEVICE_LANGUAGE_HINDI = 48,
    S3E_DEVICE_LANGUAGE_INDONESIAN = 49,
    S3E_DEVICE_LANGUAGE_IRISH = 50,
    S3E_DEVICE_LANGUAGE_KANNADA = 51,
    S3E_DEVICE_LANGUAGE_KAZAKH = 52,
    S3E_DEVICE_LANGUAGE_KHMER = 53,
    S3E_DEVICE_LANGUAGE_LAO = 54,
    S3E_DEVICE_LANGUAGE_LATVIAN = 55,
    S3E_DEVICE_LANGUAGE_LITHUANIAN = 56,
    S3E_DEVICE_LANGUAGE_MACEDONIAN = 57,
    S3E_DEVICE_LANGUAGE_MALAY = 58,
    S3E_DEVICE_LANGUAGE_MALAYALAM = 59,
    S3E_DEVICE_LANGUAGE_MARATHI = 60,
    S3E_DEVICE_LANGUAGE_MOLDOVIAN = 61,
    S3E_DEVICE_LANGUAGE_MONGOLIAN = 62,
    S3E_DEVICE_LANGUAGE_PUNJABI = 63,
    S3E_DEVICE_LANGUAGE_ROMANIAN = 64,
    S3E_DEVICE_LANGUAGE_SINHALESE = 65,
    S3E_DEVICE_LANGUAGE_SOMALI = 66,
    S3E_DEVICE_LANGUAGE_SWAHILI = 67,
    S3E_DEVICE_LANGUAGE_TAJIK = 68,
    S3E_DEVICE_LANGUAGE_TAMIL = 69,
    S3E_DEVICE_LANGUAGE_TELUGU = 70,
    S3E_DEVICE_LANGUAGE_TIBETAN = 71,
    S3E_DEVICE_LANGUAGE_TIGRINYA = 72,
    S3E_DEVICE_LANGUAGE_TURKMEN = 73,
    S3E_DEVICE_LANGUAGE_URDU = 74,
    S3E_DEVICE_LANGUAGE_UZBEK = 75,
    S3E_DEVICE_LANGUAGE_VIETNAMESE = 76,
    S3E_DEVICE_LANGUAGE_WELSH = 77,
    S3E_DEVICE_LANGUAGE_ZULU = 78
} s3eDeviceLanguage;






typedef enum s3eDeviceArchitecture
{
    S3E_DEVICE_ARCHITECTURE_ARM4T = 0,
    S3E_DEVICE_ARCHITECTURE_ARM4 = 1,
    S3E_DEVICE_ARCHITECTURE_ARM5T = 2,
    S3E_DEVICE_ARCHITECTURE_ARM5TE = 3,
    S3E_DEVICE_ARCHITECTURE_ARM5TEJ = 4,
    S3E_DEVICE_ARCHITECTURE_ARM6 = 5,
    S3E_DEVICE_ARCHITECTURE_ARM6K = 6,
    S3E_DEVICE_ARCHITECTURE_ARM6T2 = 7,
    S3E_DEVICE_ARCHITECTURE_ARM6Z = 8,
    S3E_DEVICE_ARCHITECTURE_ARM7 = 12,
    S3E_DEVICE_ARCHITECTURE_X86 = 9,
    S3E_DEVICE_ARCHITECTURE_PPC = 10,
    S3E_DEVICE_ARCHITECTURE_AMD64 = 11,
    S3E_DEVICE_ARCHITECTURE_MIPS = 13,
    S3E_DEVICE_ARCHITECTURE_MAX = 14
} s3eDeviceArchitecture;
# 552 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
typedef enum s3eDeviceSoftKeyPosition
{
    S3E_DEVICE_SOFTKEY_BOTTOM_LEFT = 0,
    S3E_DEVICE_SOFTKEY_BOTTOM_RIGHT = 1,
    S3E_DEVICE_SOFTKEY_TOP_RIGHT = 2,
    S3E_DEVICE_SOFTKEY_TOP_LEFT = 3
} s3eDeviceSoftKeyPosition;
# 595 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
extern "C" const char* s3eDeviceGetString(s3eDeviceProperty property);
# 634 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
extern "C" int32 s3eDeviceGetInt(s3eDeviceProperty property);
# 656 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
extern "C" s3eResult s3eDeviceSetInt(s3eDeviceProperty property, int32 value);
# 684 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
extern "C" int64 s3eDeviceYield(int32 ms =0);
# 706 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
extern "C" void s3eDeviceUnYield();
# 733 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
extern "C" void s3eDeviceYieldUntilEvent(int32 ms =0x7fffffffL);
# 768 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
extern "C" s3eResult s3eDeviceExecPushNext(const char* filename, const char* config_prepend =__null, const char* config_append =__null);
# 784 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
extern "C" void s3eDeviceExit(int code =0) __attribute__ ((noreturn));






typedef enum s3eDeviceState
{




    S3E_DEVICE_STATE_PAUSED = 3,





    S3E_DEVICE_STATE_EXITING = 4,




    S3E_DEVICE_STATE_RUNNING = 5
} s3eDeviceState;
# 819 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
typedef enum s3eDeviceCallback
{
# 830 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
    S3E_DEVICE_PAUSE = 0,
# 840 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
    S3E_DEVICE_UNPAUSE = 1,
# 850 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
    S3E_DEVICE_EXIT = 2,
# 866 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
    S3E_DEVICE_VOL_UP = 17,
# 882 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
    S3E_DEVICE_VOL_DOWN = 18,
# 897 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
    S3E_DEVICE_MAINS_POWER_CHANGED = 20,
# 908 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
    S3E_DEVICE_PUSH_NOTIFICATION = 21,
# 919 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
    S3E_DEVICE_BACKGROUND = 22,
# 930 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
    S3E_DEVICE_FOREGROUND = 23,

    S3E_DEVICE_CALLBACK_MAX
} s3eDeviceCallback;
# 952 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
typedef struct s3eDeviceVolChangeInfo
{





    s3eBool m_VolUp;
# 975 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
    s3eBool m_OverrideDefaultBehaviour;
} s3eDeviceVolChangeInfo;





typedef struct s3eDeviceStateChangeInfo
{



    int32 m_State;
} s3eDeviceStateChangeInfo;
# 1015 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
extern "C" s3eResult s3eDeviceRegister(s3eDeviceCallback cbid, s3eCallback fn, void* userdata);
# 1035 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
extern "C" s3eResult s3eDeviceUnRegister(s3eDeviceCallback cbid, s3eCallback fn);







extern "C" void s3eDeviceRequestQuit();
# 1054 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
extern "C" s3eBool s3eDeviceCheckQuitRequest();
# 1064 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
extern "C" s3eBool s3eDeviceCheckPauseRequest();
# 1078 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h"
extern "C" void s3eDeviceBacklightOn();
# 26 "../../../../../../../dev/sdk/5.0/s3e/h/s3e.h" 2
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eExt.h" 1
# 31 "../../../../../../../dev/sdk/5.0/s3e/h/s3eExt.h"
typedef enum s3eExtError
{
    S3E_EXT_ERR_NONE = 0,
    S3E_EXT_ERR_PARAM = 1,
    S3E_EXT_ERR_NOT_FOUND = 4
} s3eExtError;
# 49 "../../../../../../../dev/sdk/5.0/s3e/h/s3eExt.h"
extern "C" s3eExtError s3eExtGetError();
# 63 "../../../../../../../dev/sdk/5.0/s3e/h/s3eExt.h"
extern "C" const char* s3eExtGetErrorString();
# 96 "../../../../../../../dev/sdk/5.0/s3e/h/s3eExt.h"
extern "C" s3eResult s3eExtGet(const char* extension, void* functions, uint32 functionsLen);
# 106 "../../../../../../../dev/sdk/5.0/s3e/h/s3eExt.h"
extern "C" s3eResult s3eExtGetHash(uint32 hash, void* functions, uint32 functionsLen);

static inline s3eBool s3eExtAvailable(const char* extension, int32 len =0)
{
    if (s3eExtGet(extension, __null, len) == S3E_RESULT_SUCCESS)
        return (1);
    else
        return (0);
}
# 27 "../../../../../../../dev/sdk/5.0/s3e/h/s3e.h" 2

# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eKeyboard.h" 1
# 38 "../../../../../../../dev/sdk/5.0/s3e/h/s3eKeyboard.h"
typedef enum s3eKey
{
    s3eKeyFirst = 0,

    s3eKeyEsc = 1,
    s3eKeyTab = 2,
    s3eKeyBackspace = 3,
    s3eKeyEnter = 4,
    s3eKeyLeftShift = 5,
    s3eKeyLeftControl = 6,
    s3eKeyReserved = 7,
    s3eKeySpace = 8,
    s3eKeyLeft = 9,
    s3eKeyUp = 10,
    s3eKeyRight = 11,
    s3eKeyDown = 12,
    s3eKey0 = 13,
    s3eKey1 = 14,
    s3eKey2 = 15,
    s3eKey3 = 16,
    s3eKey4 = 17,
    s3eKey5 = 18,
    s3eKey6 = 19,
    s3eKey7 = 20,
    s3eKey8 = 21,
    s3eKey9 = 22,
    s3eKeyA = 23,
    s3eKeyB = 24,
    s3eKeyC = 25,
    s3eKeyD = 26,
    s3eKeyE = 27,
    s3eKeyF = 28,
    s3eKeyG = 29,
    s3eKeyH = 30,
    s3eKeyI = 31,
    s3eKeyJ = 32,
    s3eKeyK = 33,
    s3eKeyL = 34,
    s3eKeyM = 35,
    s3eKeyN = 36,
    s3eKeyO = 37,
    s3eKeyP = 38,
    s3eKeyQ = 39,
    s3eKeyR = 40,
    s3eKeyS = 41,
    s3eKeyT = 42,
    s3eKeyU = 43,
    s3eKeyV = 44,
    s3eKeyW = 45,
    s3eKeyX = 46,
    s3eKeyY = 47,
    s3eKeyZ = 48,
    s3eKeyF1 = 49,
    s3eKeyF2 = 50,
    s3eKeyF3 = 51,
    s3eKeyF4 = 52,
    s3eKeyF5 = 53,
    s3eKeyF6 = 54,
    s3eKeyF7 = 55,
    s3eKeyF8 = 56,
    s3eKeyF9 = 57,
    s3eKeyF10 = 58,
    s3eKeyNumPad0 = 59,
    s3eKeyNumPad1 = 60,
    s3eKeyNumPad2 = 61,
    s3eKeyNumPad3 = 62,
    s3eKeyNumPad4 = 63,
    s3eKeyNumPad5 = 64,
    s3eKeyNumPad6 = 65,
    s3eKeyNumPad7 = 66,
    s3eKeyNumPad8 = 67,
    s3eKeyNumPad9 = 68,
    s3eKeyNumPadPlus = 69,
    s3eKeyNumPadMinus = 70,
    s3eKeyNumPadEnter = 71,
    s3eKeyRSK = 72,
    s3eKeyLSK = 73,
    s3eKeyLS = 74,
    s3eKeyRS = 75,
    s3eKeyHash = 76,
    s3eKeyStar = 77,


    s3eKeyOk = 78,
    s3eKeyCLR = 79,


    s3eKeyVolUp = 80,
    s3eKeyVolDown = 81,


    s3eKeyCamera = 82,
    s3eKeyMic = 83,
    s3eKeyFn = 84,
    s3eKeySym = 85,


    s3eKeyAccept = 86,
    s3eKeyEnd = 87,
    s3eKeyHomePage = 88,

    s3eKeyButton1 = 89,
    s3eKeyButton2 = 90,
    s3eKeyButton3 = 91,
    s3eKeyButton4 = 92,
    s3eKeyButton5 = 93,
    s3eKeyButton6 = 94,
    s3eKeyButton7 = 95,
    s3eKeyButton8 = 96,

    s3eKeyF11 = 97,
    s3eKeyF12 = 98,
    s3eKeyLeftAlt = 99,

    s3eKeyRightControl = 100,
    s3eKeyRightAlt = 101,
    s3eKeyRightShift = 102,
    s3eKeyBacktick = 103,
    s3eKeyComma = 104,
    s3eKeyPeriod = 105,
    s3eKeySlash = 106,
    s3eKeyBackSlash = 107,
    s3eKeySemicolon = 108,
    s3eKeyApostrophe = 109,
    s3eKeyLeftBracket = 110,
    s3eKeyRightBracket = 111,
    s3eKeyEquals = 112,
    s3eKeyMinus = 113,
    s3eKeyCapsLock = 114,

    s3eKeyNumPadPeriod = 115,
    s3eKeyNumPadSlash = 116,
    s3eKeyNumLock = 117,
    s3eKeyInsert = 118,
    s3eKeyHome = 119,
    s3eKeyPageUp = 120,
    s3eKeyPageDown = 121,
    s3eKeyKbEnd = 122,
    s3eKeyDelete = 123,
    s3eKeyPause = 124,
    s3eKeyAt = 125,
    s3eKeyBack = 126,
    s3eKeyMenu = 127,
    s3eKeySearch = 128,

    s3eKeyAbsGameA = 200,
    s3eKeyAbsGameB = 201,
    s3eKeyAbsGameC = 202,
    s3eKeyAbsGameD = 203,
    s3eKeyAbsUp = 204,
    s3eKeyAbsDown = 205,
    s3eKeyAbsLeft = 206,
    s3eKeyAbsRight = 207,
    s3eKeyAbsOk = 208,
    s3eKeyAbsASK = 209,
    s3eKeyAbsBSK = 210,

    s3eKeyCount = 211
} s3eKey;
# 234 "../../../../../../../dev/sdk/5.0/s3e/h/s3eKeyboard.h"
typedef enum s3eKeyboardNumpadOrientation
{
    S3E_NUMPAD_ORIENT_NORMAL = 0,
    S3E_NUMPAD_ORIENT_ROT90 = 1,
    S3E_NUMPAD_ORIENT_ROT180 = 2,
    S3E_NUMPAD_ORIENT_ROT270 = 3
} s3eKeyboardNumpadOrientation;






typedef enum s3eKeyboardProperty
{




    S3E_KEYBOARD_HAS_NUMPAD = 0,





    S3E_KEYBOARD_HAS_ALPHA = 1,





    S3E_KEYBOARD_HAS_DIRECTION = 2,






    S3E_KEYBOARD_NUMPAD_ORIENTATION = 3,
# 298 "../../../../../../../dev/sdk/5.0/s3e/h/s3eKeyboard.h"
    S3E_KEYBOARD_GET_CHAR = 4
} s3eKeyboardProperty;







typedef enum s3eKeyboardError
{
    S3E_KEYBOARD_ERR_NONE = 0,
    S3E_KEYBOARD_ERR_PARAM = 1,
    S3E_KEYBOARD_ERR_TOO_MANY = 2,
    S3E_KEYBOARD_ERR_ALREADY_REG = 3,
    S3E_KEYBOARD_ERR_NOT_FOUND = 4,
    S3E_KEYBOARD_ERR_UNAVAIL = 5,

    S3E_KEYBOARD_ERR_DEVICE = 6
} s3eKeyboardError;






typedef enum s3eKeyboardCallback
{
# 338 "../../../../../../../dev/sdk/5.0/s3e/h/s3eKeyboard.h"
    S3E_KEYBOARD_KEY_EVENT = 0,
# 353 "../../../../../../../dev/sdk/5.0/s3e/h/s3eKeyboard.h"
    S3E_KEYBOARD_CHAR_EVENT = 1,

    S3E_KEYBOARD_CALLBACK_MAX
} s3eKeyboardCallback;






typedef struct s3eKeyboardEvent
{

    s3eKey m_Key;

    uint32 m_Pressed;
} s3eKeyboardEvent;






typedef struct s3eKeyboardCharEvent
{

    s3eWChar m_Char;
} s3eKeyboardCharEvent;
# 403 "../../../../../../../dev/sdk/5.0/s3e/h/s3eKeyboard.h"
extern "C" int32 s3eKeyboardGetInt(s3eKeyboardProperty property);
# 423 "../../../../../../../dev/sdk/5.0/s3e/h/s3eKeyboard.h"
extern "C" s3eResult s3eKeyboardSetInt(s3eKeyboardProperty property, int32 value);
# 450 "../../../../../../../dev/sdk/5.0/s3e/h/s3eKeyboard.h"
extern "C" s3eResult s3eKeyboardRegister(s3eKeyboardCallback cbid, s3eCallback fn, void* userdata);
# 468 "../../../../../../../dev/sdk/5.0/s3e/h/s3eKeyboard.h"
extern "C" s3eResult s3eKeyboardUnRegister(s3eKeyboardCallback cbid, s3eCallback fn);
# 480 "../../../../../../../dev/sdk/5.0/s3e/h/s3eKeyboard.h"
extern "C" s3eKeyboardError s3eKeyboardGetError();
# 493 "../../../../../../../dev/sdk/5.0/s3e/h/s3eKeyboard.h"
extern "C" const char* s3eKeyboardGetErrorString();







extern "C" void s3eKeyboardClearState();







extern "C" s3eResult s3eKeyboardUpdate();
# 525 "../../../../../../../dev/sdk/5.0/s3e/h/s3eKeyboard.h"
extern "C" int32 s3eKeyboardGetState(s3eKey key);






extern "C" s3eWChar s3eKeyboardGetChar();
# 543 "../../../../../../../dev/sdk/5.0/s3e/h/s3eKeyboard.h"
extern "C" s3eKey s3eKeyboardAnyKey();
# 566 "../../../../../../../dev/sdk/5.0/s3e/h/s3eKeyboard.h"
extern "C" s3eResult s3eKeyboardGetDisplayName(char* dst, s3eKey key, s3eBool terminateString =(1));





# 1 "../../../../../../../dev/sdk/5.0/s3e/h/legacy/s3eKeyboard_legacy.h" 1
# 573 "../../../../../../../dev/sdk/5.0/s3e/h/s3eKeyboard.h" 2
# 29 "../../../../../../../dev/sdk/5.0/s3e/h/s3e.h" 2
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eLicense.h" 1
# 36 "../../../../../../../dev/sdk/5.0/s3e/h/s3eLicense.h"
typedef enum s3eLicenseStatus
{
    S3E_LICENSE_EXPIRED = 0,
    S3E_LICENSE_DEMO = 0x10,
    S3E_LICENSE_USECOUNT = 0x20,
    S3E_LICENSE_EXPIRYDATE = 0x21,
    S3E_LICENSE_EXPIRYMINSUSE = 0x22,
    S3E_LICENSE_PURCHASE = 0x100,
    S3E_LICENSE_SUBSCRIPTION = 0x200,
    S3E_LICENSE_UPGRADE = 0x300,
    S3E_LICENSE_NONCOMMERCIAL = 0x1000
} s3eLicenseStatus;






typedef enum s3eLicenseError
{
    S3E_LICENSE_ERR_NONE = 0,
    S3E_LICENSE_ERR_PARAM = 1
} s3eLicenseError;






typedef enum s3eLicenseProperty
{
    S3E_LICENSE_USES_LEFT,
    S3E_LICENSE_EXPIRY_DATE,
    S3E_LICENSE_MINS_LEFT,
    S3E_LICENSE_STATUS
} s3eLicenseProperty;




extern "C" int32 s3eLicenseGetInt(s3eLicenseProperty property);
# 88 "../../../../../../../dev/sdk/5.0/s3e/h/s3eLicense.h"
extern "C" s3eLicenseError s3eLicenseGetError();
# 102 "../../../../../../../dev/sdk/5.0/s3e/h/s3eLicense.h"
extern "C" const char* s3eLicenseGetErrorString();
# 111 "../../../../../../../dev/sdk/5.0/s3e/h/s3eLicense.h"
extern "C" s3eResult s3eLicenseBuy();
# 30 "../../../../../../../dev/sdk/5.0/s3e/h/s3e.h" 2
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eMemory.h" 1
# 38 "../../../../../../../dev/sdk/5.0/s3e/h/s3eMemory.h"
typedef enum s3eMemoryProperty
{
# 55 "../../../../../../../dev/sdk/5.0/s3e/h/s3eMemory.h"
    S3E_MEMORY_HEAP = 0,





    S3E_MEMORY_SIZE = 1,





    S3E_MEMORY_FREE = 2,





    S3E_MEMORY_USED = 3,






    S3E_MEMORY_LFB = 4,






    S3E_MEMORY_FLAGS = 5
} s3eMemoryProperty;







typedef enum s3eMemoryFlags
{



    S3E_MEMORY_NO_MSG_ON_FAIL = (1 << 0),
# 112 "../../../../../../../dev/sdk/5.0/s3e/h/s3eMemory.h"
    S3E_MEMORY_USE_STACK_ALLOCATOR = (1 << 1),
# 121 "../../../../../../../dev/sdk/5.0/s3e/h/s3eMemory.h"
    S3E_MEMORY_INACTIVE = (1 << 2)
} s3eMemoryFlags;
# 144 "../../../../../../../dev/sdk/5.0/s3e/h/s3eMemory.h"
extern "C" int32 s3eMemoryGetInt(s3eMemoryProperty property);
# 163 "../../../../../../../dev/sdk/5.0/s3e/h/s3eMemory.h"
extern "C" s3eResult s3eMemorySetInt(s3eMemoryProperty property, int32 value);
# 172 "../../../../../../../dev/sdk/5.0/s3e/h/s3eMemory.h"
typedef enum s3eMemoryError
{
    S3E_MEMORY_ERR_NONE = 0,
    S3E_MEMORY_ERR_PARAM = 1,
    S3E_MEMORY_ERR_UNAVAIL = 5,

    S3E_MEMORY_ERR_INVALID_PTR = 1000,
    S3E_MEMORY_ERR_NO_MEM = 1001,
    S3E_MEMORY_ERR_INVALID_STATE = 1002
} s3eMemoryError;
# 194 "../../../../../../../dev/sdk/5.0/s3e/h/s3eMemory.h"
extern "C" s3eMemoryError s3eMemoryGetError();
# 208 "../../../../../../../dev/sdk/5.0/s3e/h/s3eMemory.h"
extern "C" const char* s3eMemoryGetErrorString();
# 229 "../../../../../../../dev/sdk/5.0/s3e/h/s3eMemory.h"
extern "C" void* s3eMalloc(int size);
# 253 "../../../../../../../dev/sdk/5.0/s3e/h/s3eMemory.h"
extern "C" void* s3eRealloc(void* item, int newSize);
# 267 "../../../../../../../dev/sdk/5.0/s3e/h/s3eMemory.h"
extern "C" void s3eFree(void* item);
# 286 "../../../../../../../dev/sdk/5.0/s3e/h/s3eMemory.h"
extern "C" void* s3eMallocBase(int size);
# 312 "../../../../../../../dev/sdk/5.0/s3e/h/s3eMemory.h"
extern "C" void* s3eReallocBase(void* item, int newSize);
# 324 "../../../../../../../dev/sdk/5.0/s3e/h/s3eMemory.h"
extern "C" void s3eFreeBase(void* item);
# 345 "../../../../../../../dev/sdk/5.0/s3e/h/s3eMemory.h"
extern "C" s3eResult s3eMemoryHeapDestroy(int32 heapID, s3eBool failIfNotEmpty);
# 360 "../../../../../../../dev/sdk/5.0/s3e/h/s3eMemory.h"
extern "C" s3eResult s3eMemoryHeapCreate(int32 heapID);
# 369 "../../../../../../../dev/sdk/5.0/s3e/h/s3eMemory.h"
extern "C" void* s3eMemoryHeapAddress(int32 heapID);



typedef void*(*s3eMallocFn)(int size);
typedef void*(*s3eReallocFn)(void* item, int size);
typedef void (*s3eFreeFn)(void* item);




typedef struct s3eMemoryUsrMgr
{
    s3eMallocFn m_Malloc;
    s3eReallocFn m_Realloc;
    s3eFreeFn m_Free;
} s3eMemoryUsrMgr;
# 407 "../../../../../../../dev/sdk/5.0/s3e/h/s3eMemory.h"
extern "C" s3eResult s3eMemorySetUserMemMgr(s3eMemoryUsrMgr* callbacks);
# 429 "../../../../../../../dev/sdk/5.0/s3e/h/s3eMemory.h"
extern "C" s3eResult s3eMemoryGetUserMemMgr(s3eMemoryUsrMgr* callbacks);
# 31 "../../../../../../../dev/sdk/5.0/s3e/h/s3e.h" 2
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3ePointer.h" 1
# 37 "../../../../../../../dev/sdk/5.0/s3e/h/s3ePointer.h"
typedef enum s3ePointerType
{
    S3E_POINTER_TYPE_INVALID = 0,
    S3E_POINTER_TYPE_MOUSE = 1,
    S3E_POINTER_TYPE_STYLUS = 2
} s3ePointerType;







typedef enum s3eStylusType
{
    S3E_STYLUS_TYPE_INVALID = 0,
    S3E_STYLUS_TYPE_STYLUS = 1,
    S3E_STYLUS_TYPE_FINGER = 2
} s3eStylusType;
# 68 "../../../../../../../dev/sdk/5.0/s3e/h/s3ePointer.h"
typedef enum s3ePointerProperty
{



    S3E_POINTER_AVAILABLE = 0,






    S3E_POINTER_HIDE_CURSOR = 1,




    S3E_POINTER_TYPE = 2,




    S3E_POINTER_STYLUS_TYPE = 3,




    S3E_POINTER_MULTI_TOUCH_AVAILABLE = 4

} s3ePointerProperty;
# 111 "../../../../../../../dev/sdk/5.0/s3e/h/s3ePointer.h"
extern "C" int32 s3ePointerGetInt(s3ePointerProperty property);
# 128 "../../../../../../../dev/sdk/5.0/s3e/h/s3ePointer.h"
extern "C" s3eResult s3ePointerSetInt(s3ePointerProperty property, int32 value);
# 137 "../../../../../../../dev/sdk/5.0/s3e/h/s3ePointer.h"
typedef enum s3ePointerCallback
{







    S3E_POINTER_BUTTON_EVENT,




    S3E_POINTER_MOTION_EVENT,






    S3E_POINTER_TOUCH_EVENT,






    S3E_POINTER_TOUCH_MOTION_EVENT,
    S3E_POINTER_CALLBACK_MAX
} s3ePointerCallback;
# 189 "../../../../../../../dev/sdk/5.0/s3e/h/s3ePointer.h"
extern "C" s3eResult s3ePointerRegister(s3ePointerCallback cbid, s3eCallback fn, void* userData);
# 206 "../../../../../../../dev/sdk/5.0/s3e/h/s3ePointer.h"
extern "C" s3eResult s3ePointerUnRegister(s3ePointerCallback cbid, s3eCallback fn);
# 215 "../../../../../../../dev/sdk/5.0/s3e/h/s3ePointer.h"
typedef enum s3ePointerError
{
    S3E_POINTER_ERR_NONE = 0,
    S3E_POINTER_ERR_PARAM = 1,
    S3E_POINTER_ERR_TOO_MANY = 2,
    S3E_POINTER_ERR_ALREADY_REG = 3,
    S3E_POINTER_ERR_NOT_FOUND = 4,
    S3E_POINTER_ERR_UNAVAIL = 5
} s3ePointerError;







extern "C" s3ePointerError s3ePointerGetError();







extern "C" const char* s3ePointerGetErrorString();






typedef enum s3ePointerState
{
    S3E_POINTER_STATE_UP = 0,
    S3E_POINTER_STATE_DOWN = 1,
    S3E_POINTER_STATE_PRESSED = 2,
    S3E_POINTER_STATE_RELEASED = 4,
    S3E_POINTER_STATE_UNKNOWN
} s3ePointerState;






typedef enum s3ePointerButton
{
    S3E_POINTER_BUTTON_SELECT = 0,
    S3E_POINTER_BUTTON_LEFTMOUSE = 0,
    S3E_POINTER_BUTTON_RIGHTMOUSE = 1,
    S3E_POINTER_BUTTON_MIDDLEMOUSE = 2,
    S3E_POINTER_BUTTON_MOUSEWHEELUP = 3,
    S3E_POINTER_BUTTON_MOUSEWHEELDOWN = 4,
    S3E_POINTER_BUTTON_MAX
} s3ePointerButton;




typedef struct s3ePointerEvent
{

    s3ePointerButton m_Button;

    uint32 m_Pressed;

    int32 m_x;

    int32 m_y;
} s3ePointerEvent;




typedef struct s3ePointerMotionEvent
{

    int32 m_x;

    int32 m_y;
} s3ePointerMotionEvent;




typedef struct s3ePointerTouchEvent
{





    uint32 m_TouchID;

    uint32 m_Pressed;

    int32 m_x;

    int32 m_y;
} s3ePointerTouchEvent;




typedef struct s3ePointerTouchMotionEvent
{





    uint32 m_TouchID;

    int32 m_x;

    int32 m_y;
} s3ePointerTouchMotionEvent;






extern "C" s3ePointerState s3ePointerGetState(s3ePointerButton button);






extern "C" int32 s3ePointerGetX();






extern "C" int32 s3ePointerGetY();
# 363 "../../../../../../../dev/sdk/5.0/s3e/h/s3ePointer.h"
extern "C" s3ePointerState s3ePointerGetTouchState(uint32 touchID);
# 375 "../../../../../../../dev/sdk/5.0/s3e/h/s3ePointer.h"
extern "C" int32 s3ePointerGetTouchX(uint32 touchID);
# 387 "../../../../../../../dev/sdk/5.0/s3e/h/s3ePointer.h"
extern "C" int32 s3ePointerGetTouchY(uint32 touchID);







extern "C" s3eResult s3ePointerUpdate();
# 32 "../../../../../../../dev/sdk/5.0/s3e/h/s3e.h" 2
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSecureStorage.h" 1
# 38 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSecureStorage.h"
typedef enum s3eSecureStorageError
{
    S3E_SECURESTORAGE_ERR_NONE = 0,
    S3E_SECURESTORAGE_ERR_PARAM = 1,
    S3E_SECURESTORAGE_ERR_NOT_FOUND = 4,
    S3E_SECURESTORAGE_ERR_DEVICE = 6,
    S3E_SECURESTORAGE_ERR_INSUFF = 1000,
    S3E_SECURESTORAGE_ERR_CORRUPT = 1001
} s3eSecureStorageError;
# 59 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSecureStorage.h"
extern "C" s3eSecureStorageError s3eSecureStorageGetError();
# 72 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSecureStorage.h"
extern "C" const char* s3eSecureStorageGetErrorString();
# 96 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSecureStorage.h"
extern "C" s3eResult s3eSecureStoragePut(void* data, uint16 size);
# 119 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSecureStorage.h"
extern "C" s3eResult s3eSecureStorageGet(void* data, uint16 size);
# 33 "../../../../../../../dev/sdk/5.0/s3e/h/s3e.h" 2
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h" 1
# 38 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
typedef enum s3eSoundProperty
{





    S3E_SOUND_VOLUME = 0,





    S3E_SOUND_OUTPUT_FREQ = 1,






    S3E_SOUND_DEFAULT_FREQ = 2,




    S3E_SOUND_NUM_CHANNELS = 3,





    S3E_SOUND_USED_CHANNELS = 4,




    S3E_SOUND_AVAILABLE = 5,
# 87 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
    S3E_SOUND_VOLUME_DEFAULT = 6,
# 96 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
    S3E_SOUND_STEREO_ENABLED = 7
} s3eSoundProperty;
# 124 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
extern "C" int32 s3eSoundGetInt(s3eSoundProperty property);
# 146 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
extern "C" s3eResult s3eSoundSetInt(s3eSoundProperty property, int32 value);
# 155 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
typedef enum s3eSoundError
{
    S3E_SOUND_ERR_NONE = 0,
    S3E_SOUND_ERR_PARAM = 1,
    S3E_SOUND_ERR_TOO_MANY = 2,
    S3E_SOUND_ERR_ALREADY_REG = 3,
    S3E_SOUND_ERR_NOT_FOUND = 4,
    S3E_SOUND_ERR_UNAVAIL = 5
} s3eSoundError;
# 176 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
extern "C" s3eSoundError s3eSoundGetError();
# 189 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
extern "C" const char* s3eSoundGetErrorString();
# 203 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
extern "C" int s3eSoundGetFreeChannel();
# 218 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
extern "C" void s3eSoundPauseAllChannels();
# 232 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
extern "C" void s3eSoundResumeAllChannels();
# 247 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
extern "C" void s3eSoundStopAllChannels();






typedef enum s3eSoundChannelProperty
{
# 266 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
    S3E_CHANNEL_PITCH = 0,
# 275 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
    S3E_CHANNEL_RATE = 1,







    S3E_CHANNEL_USERVAR = 2,
# 292 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
    S3E_CHANNEL_VOLUME = 3,





    S3E_CHANNEL_STATUS = 4,





    S3E_CHANNEL_PAUSED = 5
} s3eSoundChannelProperty;
# 325 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
typedef enum s3eSoundChannelCallback
{
# 338 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
    S3E_CHANNEL_END_SAMPLE = 0,
# 351 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
    S3E_CHANNEL_GEN_AUDIO = 1,
# 363 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
    S3E_CHANNEL_STOP_AUDIO = 2,
# 375 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
    S3E_CHANNEL_GEN_AUDIO_STEREO = 3
} s3eSoundChannelCallback;
# 422 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
typedef struct s3eSoundEndSampleInfo
{



    int32 m_Channel;





    int32 m_RepsRemaining;






    int16* m_NewData;





    uint32 m_NumSamples;
} s3eSoundEndSampleInfo;
# 508 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
typedef struct s3eSoundGenAudioInfo
{
    int32 m_Channel;

    int16* m_Target;
    uint32 m_NumSamples;
    int32 m_Mix;

    int16* m_OrigStart;
    uint32 m_OrigNumSamples;
    uint32 m_OrigRepeat;

    s3eBool m_EndSample;
    s3eBool m_Stereo;
} s3eSoundGenAudioInfo;
# 550 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
extern "C" s3eResult s3eSoundChannelSetInt(int channel, s3eSoundChannelProperty property, int32 value);
# 569 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
extern "C" int32 s3eSoundChannelGetInt(int channel, s3eSoundChannelProperty property);
# 602 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
extern "C" s3eResult s3eSoundChannelPlay(int channel, int16* start, uint32 numSamples, int32 repeat, int32 loopfrom);
# 624 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
extern "C" s3eResult s3eSoundChannelStop(int channel);
# 645 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
extern "C" s3eResult s3eSoundChannelPause(int channel);
# 666 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
extern "C" s3eResult s3eSoundChannelResume(int channel);
# 695 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
extern "C" s3eResult s3eSoundChannelRegister(int channel, s3eSoundChannelCallback cbid, s3eCallback func, void* userData);
# 720 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSound.h"
extern "C" s3eResult s3eSoundChannelUnRegister(int channel, s3eSoundChannelCallback cbid);
# 34 "../../../../../../../dev/sdk/5.0/s3e/h/s3e.h" 2
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h" 1
# 36 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
typedef enum s3eSocketType
{
    S3E_SOCKET_TCP,
    S3E_SOCKET_UDP
} s3eSocketType;

typedef enum s3eNetworkType
{
    S3E_NETWORK_TYPE_NONE = 0,
    S3E_NETWORK_TYPE_UNKNOWN = 1,
    S3E_NETWORK_TYPE_LAN = 2,
    S3E_NETWORK_TYPE_WLAN = 3,
    S3E_NETWORK_TYPE_GPRS = 4,
    S3E_NETWORK_TYPE_UMTS = 5,
    S3E_NETWORK_TYPE_EVDO = 6,
    S3E_NETWORK_TYPE_CDMA2000 = 7,
    S3E_NETWORK_TYPE_HSDPA = 8
} s3eNetworkType;
# 80 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
typedef struct s3eSocket s3eSocket;
# 93 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
typedef uint32 s3eInetIPAddress;
# 106 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
typedef struct s3eInetAddress
{

    char m_Local;

    char m_LocalAddress[128];

    char m_Abstract;

    s3eInetIPAddress m_IPAddress;

    uint16 m_Port;

    char m_String[128];
} s3eInetAddress;
# 129 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
typedef enum s3eSocketProperty
{



    S3E_SOCKET_MAX_SOCKETS,



    S3E_SOCKET_NETWORK_AVAILABLE,



    S3E_SOCKET_NETWORK_TYPE,



    S3E_SOCKET_DOMAINNAME,



    S3E_SOCKET_HOSTNAME,



    S3E_SOCKET_HTTP_PROXY,



    S3E_SOCKET_UDP_AVAILABLE
} s3eSocketProperty;


typedef enum s3eSocketOption
{





    S3E_SOCKET_NODELAY = 1,







    S3E_SOCKET_KEEPALIVE = 2,







    S3E_SOCKET_BROADCAST = 3,
# 196 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
    S3E_SOCKET_ADD_MEMBERSHIP = 4,
# 209 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
    S3E_SOCKET_DROP_MEMBERSHIP = 5

} s3eSocketOption;
# 226 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" int32 s3eSocketGetInt(s3eSocketProperty socketProperty);
# 241 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" s3eResult s3eSocketSetOpt(s3eSocket* s, s3eSocketOption opt, void* value, int valueLen);
# 256 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" s3eResult s3eSocketGetOpt(s3eSocket* s, s3eSocketOption opt, void* out, int* outLen);
# 267 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" const char* s3eSocketGetString(s3eSocketProperty socketProperty);
# 276 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
typedef int32 (*s3eSocketCallbackFn)(s3eSocket* s, void* systemData, void* userData);
# 286 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
typedef enum s3eSocketError
{
    S3E_SOCKET_ERR_NONE = 0,
    S3E_SOCKET_ERR_PARAM = 1,
    S3E_SOCKET_ERR_TOO_MANY = 2,
    S3E_SOCKET_ERR_ALREADY_REG = 3,
    S3E_SOCKET_ERR_NOT_FOUND = 4,
    S3E_SOCKET_ERR_UNAVAIL = 5,
    S3E_SOCKET_ERR_UNSUPPORTED = 7,

    S3E_SOCKET_ERR_WOULDBLOCK = 1000,
    S3E_SOCKET_ERR_INPROGRESS = 1001,
    S3E_SOCKET_ERR_ALREADY = 1002,
    S3E_SOCKET_ERR_NOTSOCK = 1003,
    S3E_SOCKET_ERR_MSGSIZE = 1004,
    S3E_SOCKET_ERR_ADDRINUSE = 1005,
    S3E_SOCKET_ERR_NETDOWN = 1006,
    S3E_SOCKET_ERR_CONNRESET = 1007,
    S3E_SOCKET_ERR_ISCONN = 1008,
    S3E_SOCKET_ERR_NOTCONN = 1009,
    S3E_SOCKET_ERR_SHUTDOWN = 1010,
    S3E_SOCKET_ERR_TIMEDOUT = 1011,
    S3E_SOCKET_ERR_CONNREFUSED = 1012,
    S3E_SOCKET_ERR_UNKNOWN_HOST = 1013
} s3eSocketErrors;
# 325 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" s3eSocketErrors s3eSocketGetError();
# 339 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" const char* s3eSocketGetErrorString();
# 352 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" s3eResult s3eInetAton(s3eInetIPAddress* result, const char* addr);
# 362 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" uint32 s3eInetNtohl(uint32 addr);
# 372 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" uint32 s3eInetHtonl(uint32 addr);
# 382 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" uint16 s3eInetNtohs(uint16 addr);
# 392 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" uint16 s3eInetHtons(uint16 addr);
# 405 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" char* s3eInetNtoa(s3eInetIPAddress addr, char* buf, int len);
# 415 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" const char* s3eInetToString(const s3eInetAddress* s);
# 439 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" s3eResult s3eInetLookup(const char* hostname, s3eInetAddress* addr, s3eCallback func, void* userData);




extern "C" void s3eInetLookupCancel();
# 461 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" s3eSocket* s3eSocketCreate(s3eSocketType type, uint32 flags =0);
# 475 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" s3eResult s3eSocketClose(s3eSocket* socket);
# 506 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" s3eResult s3eSocketBind(s3eSocket* sock, const s3eInetAddress* addr, uint8 reuseAddress);
# 521 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" s3eResult s3eSocketGetLocalName(s3eSocket* sock, s3eInetAddress* addr);
# 534 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" s3eResult s3eSocketGetPeerName(s3eSocket* sock, s3eInetAddress* addr);
# 566 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" s3eResult s3eSocketConnect(s3eSocket* sock, const s3eInetAddress* addr, s3eSocketCallbackFn func, void* userdata);
# 587 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" int32 s3eSocketSend(s3eSocket* sock, const char* buf, uint32 len, int flags);
# 607 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" int32 s3eSocketRecv(s3eSocket* sock, char* buf, uint32 len, int flags);
# 628 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" int32 s3eSocketRecvFrom(s3eSocket* s, char* buf, uint32 len, int flags, s3eInetAddress* from);
# 653 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" int32 s3eSocketSendTo(s3eSocket* s, const char* buf, uint32 len, int flags, const s3eInetAddress* to);
# 673 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" s3eResult s3eSocketListen(s3eSocket* s, uint16 backlog);
# 694 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" s3eSocket* s3eSocketAccept(s3eSocket* s, s3eInetAddress* addr, s3eSocketCallbackFn callback, void* userdata);
# 708 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" s3eResult s3eSocketReadable(s3eSocket* s, s3eSocketCallbackFn readable, void* userData);
# 721 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSocket.h"
extern "C" s3eResult s3eSocketWritable(s3eSocket* s, s3eSocketCallbackFn writable, void* data);
# 35 "../../../../../../../dev/sdk/5.0/s3e/h/s3e.h" 2
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSurface.h" 1
# 91 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSurface.h"
typedef enum s3eSurfacePixelType
{
    S3E_SURFACE_PIXEL_TYPE_RGB444 = 0x20 | 0x400 | 0x1,
    S3E_SURFACE_PIXEL_TYPE_RGB555 = 0x20 | 0x400 | 0x3,
    S3E_SURFACE_PIXEL_TYPE_RGB5551 = 0x20 | 0x400 | 0x6,
    S3E_SURFACE_PIXEL_TYPE_RGB565 = 0x20 | 0x400 | 0x2,
    S3E_SURFACE_PIXEL_TYPE_RGB666 = 0x40 | 0x400 | 0x4,
    S3E_SURFACE_PIXEL_TYPE_RGB888 = 0x40 | 0x400 | 0x5,
    S3E_SURFACE_PIXEL_TYPE_RGB888_3B = 0x30 | 0x400 | 0x5,
    S3E_SURFACE_PIXEL_TYPE_XRGB888 = 0x40 | 0x400 | 0x7,

    S3E_SURFACE_PIXEL_TYPE_BGR444 = 0x20 | 0x800 | 0x1,
    S3E_SURFACE_PIXEL_TYPE_BGR555 = 0x20 | 0x800 | 0x3,
    S3E_SURFACE_PIXEL_TYPE_BGR5551 = 0x20 | 0x800 | 0x6,
    S3E_SURFACE_PIXEL_TYPE_BGR565 = 0x20 | 0x800 | 0x2,
    S3E_SURFACE_PIXEL_TYPE_BGR666 = 0x40 | 0x800 | 0x4,
    S3E_SURFACE_PIXEL_TYPE_BGR888 = 0x40 | 0x800 | 0x5,
    S3E_SURFACE_PIXEL_TYPE_BGR888_3B = 0x30 | 0x800 | 0x5,
    S3E_SURFACE_PIXEL_TYPE_XBGR888 = 0x40 | 0x800 | 0x7
} s3eSurfacePixelType;






typedef enum s3eSurfaceBlitDirection
{

    S3E_SURFACE_BLIT_DIR_NORMAL = 0,


    S3E_SURFACE_BLIT_DIR_ROT90 = 1,


    S3E_SURFACE_BLIT_DIR_ROT180 = 2,


    S3E_SURFACE_BLIT_DIR_ROT270 = 3,



    S3E_SURFACE_BLIT_DIR_NATIVE = 4
} s3eSurfaceBlitDirection;






typedef struct s3eSurfaceInfo
{

    uint32 m_Width;

    uint32 m_Height;

    uint32 m_Pitch;

    s3eSurfacePixelType m_PixelType;

    void* m_Data;
} s3eSurfaceInfo;




extern "C" void s3eSurfaceClear(uint8 r, uint8 g, uint8 b);






extern "C" void s3eSurfaceBlank(uint8 bitpattern);







typedef enum s3eSurfaceProperty
{




    S3E_SURFACE_WIDTH = 0,





    S3E_SURFACE_HEIGHT = 1,


    S3E_SURFACE_PITCH = 2,


    S3E_SURFACE_PIXEL_TYPE = 3,


    S3E_SURFACE_DEVICE_WIDTH = 4,


    S3E_SURFACE_DEVICE_HEIGHT = 5,


    S3E_SURFACE_DEVICE_PIXEL_TYPE = 6,


    S3E_SURFACE_DEVICE_PITCH = 7,





    S3E_SURFACE_BLIT_DIRECTION = 8,


    S3E_SURFACE_DISPLAY = 9,



    S3E_SURFACE_NUM_DISPLAYS = 10,
# 226 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSurface.h"
    S3E_SURFACE_DEVICE_BLIT_DIRECTION = 11,
# 237 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSurface.h"
    S3E_SURFACE_DEVICE_WIDTH_QUANTISED = 12,
# 248 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSurface.h"
    S3E_SURFACE_DEVICE_HEIGHT_QUANTISED = 13
} s3eSurfaceProperty;
# 263 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSurface.h"
extern "C" int32 s3eSurfaceGetInt(s3eSurfaceProperty property);
# 274 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSurface.h"
typedef struct s3eSurfaceOrientation
{
    s3eBool m_OrientationChanged;
    uint32 m_Width;
    uint32 m_Height;
    s3eSurfaceBlitDirection m_DeviceBlitDirection;
    uint32 m_Pitch;
} s3eSurfaceOrientation;
# 291 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSurface.h"
typedef enum s3eSurfaceCallback
{
# 304 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSurface.h"
    S3E_SURFACE_COPYUP = 0,
# 317 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSurface.h"
    S3E_SURFACE_SCREENSIZE = 1,
    S3E_SURFACE_CALLBACK_MAX
} s3eSurfaceCallback;
# 344 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSurface.h"
typedef struct s3eSurfaceCopyupInfo
{

    s3eSurfaceInfo m_SrcSurface;

    s3eSurfaceInfo m_DestSurface;

    uint32 m_X;

    uint32 m_Y;

    uint32 m_Width;

    uint32 m_Height;

    s3eSurfaceBlitDirection m_BlitDirection;
} s3eSurfaceCopyupInfo;
# 387 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSurface.h"
extern "C" s3eResult s3eSurfaceRegister(s3eSurfaceCallback cbid, s3eCallback fn, void* userData);
# 406 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSurface.h"
extern "C" s3eResult s3eSurfaceUnRegister(s3eSurfaceCallback cbid, s3eCallback fn);
# 415 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSurface.h"
typedef enum s3eSurfaceError
{
    S3E_SURFACE_ERR_NONE = 0,
    S3E_SURFACE_ERR_PARAM = 1,
    S3E_SURFACE_ERR_TOO_MANY = 2,
    S3E_SURFACE_ERR_ALREADY_REG = 3,
    S3E_SURFACE_ERR_NOT_FOUND = 4,
    S3E_SURFACE_ERR_DEVICE = 6,
    S3E_SURFACE_ERR_MEM = 8
} s3eSurfaceError;
# 437 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSurface.h"
extern "C" s3eSurfaceError s3eSurfaceGetError();
# 451 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSurface.h"
extern "C" const char* s3eSurfaceGetErrorString();
# 473 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSurface.h"
extern "C" void* s3eSurfacePtr();
# 508 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSurface.h"
extern "C" s3eResult s3eSurfaceShow();
# 598 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSurface.h"
extern "C" s3eResult s3eSurfaceSetup(s3eSurfacePixelType pixelType, uint32 pitch =0, void* ptr =__null, s3eSurfaceBlitDirection blitDirection =S3E_SURFACE_BLIT_DIR_NORMAL);
# 626 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSurface.h"
extern "C" void s3eSurfaceInvalidate(int32 x, int32 y, int32 dx, int32 dy);
# 640 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSurface.h"
extern "C" uint32 s3eSurfaceConvertRGB(uint8 r, uint8 g, uint8 b);
# 659 "../../../../../../../dev/sdk/5.0/s3e/h/s3eSurface.h"
extern "C" s3eResult s3eSurfaceSetDisplayID(uint32 id);
# 36 "../../../../../../../dev/sdk/5.0/s3e/h/s3e.h" 2
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eThread.h" 1
# 55 "../../../../../../../dev/sdk/5.0/s3e/h/s3eThread.h"
typedef enum s3eThreadError
{
    S3E_THREAD_ERR_NONE = 0,
    S3E_THREAD_ERR_PARAM = 1,
    S3E_THREAD_ERR_TOO_MANY = 2,
    S3E_THREAD_ERR_ALREADY = 3,
    S3E_THREAD_ERR_UNKNOWN = 9,
    S3E_THREAD_ERR_TIMEOUT = 1000,
    S3E_THREAD_ERR_WRONG_THREAD = 1001
} s3eThreadError;


typedef struct _s3eThread s3eThread;


typedef struct _s3eThreadLock s3eThreadLock;


typedef struct _s3eThreadSem s3eThreadSem;
# 90 "../../../../../../../dev/sdk/5.0/s3e/h/s3eThread.h"
typedef void* (*s3eThreadStartFunc)(void*);
typedef void (*s3eThreadCleanupHandler)();

extern "C" {




s3eBool s3eThreadAvailable();
# 112 "../../../../../../../dev/sdk/5.0/s3e/h/s3eThread.h"
const char* s3eThreadGetErrorString();
# 125 "../../../../../../../dev/sdk/5.0/s3e/h/s3eThread.h"
s3eThreadError s3eThreadGetError();






int s3eThreadCount();
# 145 "../../../../../../../dev/sdk/5.0/s3e/h/s3eThread.h"
s3eThread* s3eThreadCreate(s3eThreadStartFunc startRoutine, void* arg =__null, s3eThreadCleanupHandler cleanup =__null, int stackSize =0, void* stackPtr =0);




s3eThread* s3eThreadGetCurrent();




void s3eThreadExit(void* retval);
# 164 "../../../../../../../dev/sdk/5.0/s3e/h/s3eThread.h"
s3eResult s3eThreadDetach(s3eThread* thread);
# 175 "../../../../../../../dev/sdk/5.0/s3e/h/s3eThread.h"
s3eResult s3eThreadJoin(s3eThread* thread, void** result =__null);







s3eResult s3eThreadCancel(s3eThread* thread);
# 197 "../../../../../../../dev/sdk/5.0/s3e/h/s3eThread.h"
s3eThreadLock* s3eThreadLockCreate();






s3eResult s3eThreadLockDestroy(s3eThreadLock* lock);
# 227 "../../../../../../../dev/sdk/5.0/s3e/h/s3eThread.h"
s3eResult s3eThreadLockAcquire(s3eThreadLock* lock, int timeout =-1);
# 240 "../../../../../../../dev/sdk/5.0/s3e/h/s3eThread.h"
s3eResult s3eThreadLockRelease(s3eThreadLock* lock);







s3eThreadSem* s3eThreadSemCreate(int initialValue);
# 260 "../../../../../../../dev/sdk/5.0/s3e/h/s3eThread.h"
s3eResult s3eThreadSemDestroy(s3eThreadSem* sem);
# 278 "../../../../../../../dev/sdk/5.0/s3e/h/s3eThread.h"
s3eResult s3eThreadSemWait(s3eThreadSem* sem, int timeout =-1);
# 293 "../../../../../../../dev/sdk/5.0/s3e/h/s3eThread.h"
s3eResult s3eThreadSemPost(s3eThreadSem* sem);
# 306 "../../../../../../../dev/sdk/5.0/s3e/h/s3eThread.h"
s3eResult s3eThreadSemGetValue(s3eThreadSem* sem, int* value);
# 325 "../../../../../../../dev/sdk/5.0/s3e/h/s3eThread.h"
s3eResult s3eThreadEnqueueCallback(s3eThread* thread, s3eCallback callback, void* userData);

}
# 37 "../../../../../../../dev/sdk/5.0/s3e/h/s3e.h" 2
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eTimer.h" 1
# 36 "../../../../../../../dev/sdk/5.0/s3e/h/s3eTimer.h"
typedef enum s3eTimerProperty
{
    S3E_TIMER_RESOLUTION
} s3eTimerProperty;
# 48 "../../../../../../../dev/sdk/5.0/s3e/h/s3eTimer.h"
typedef enum s3eTimerError
{
    S3E_TIMER_ERR_NONE = 0,
    S3E_TIMER_ERR_PARAM = 1,
    S3E_TIMER_ERR_TOO_MANY = 2,
    S3E_TIMER_ERR_ALREADY_REG = 3,
    S3E_TIMER_ERR_NOT_FOUND = 4,
    S3E_TIMER_ERR_UNAVAIL = 5
} s3eTimerError;
# 69 "../../../../../../../dev/sdk/5.0/s3e/h/s3eTimer.h"
extern "C" s3eTimerError s3eTimerGetError();
# 82 "../../../../../../../dev/sdk/5.0/s3e/h/s3eTimer.h"
extern "C" const char* s3eTimerGetErrorString();
# 98 "../../../../../../../dev/sdk/5.0/s3e/h/s3eTimer.h"
extern "C" int32 s3eTimerGetInt(s3eTimerProperty property);
# 112 "../../../../../../../dev/sdk/5.0/s3e/h/s3eTimer.h"
extern "C" int64 s3eTimerGetUST();
# 123 "../../../../../../../dev/sdk/5.0/s3e/h/s3eTimer.h"
extern "C" int64 s3eTimerGetUSTNanoseconds();




extern "C" uint64 s3eTimerGetMs();





extern "C" int64 s3eTimerGetUTC();





extern "C" int64 s3eTimerGetLocaltimeOffset();
# 172 "../../../../../../../dev/sdk/5.0/s3e/h/s3eTimer.h"
extern "C" s3eResult s3eTimerSetTimer(uint32 ms, s3eCallback fn, void* userData);
# 194 "../../../../../../../dev/sdk/5.0/s3e/h/s3eTimer.h"
extern "C" s3eResult s3eTimerCancelTimer(s3eCallback fn, void* userData);
# 38 "../../../../../../../dev/sdk/5.0/s3e/h/s3e.h" 2

# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVersion.h" 1
# 40 "../../../../../../../dev/sdk/5.0/s3e/h/s3e.h" 2
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVibra.h" 1
# 38 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVibra.h"
typedef enum s3eVibraProperty
{





    S3E_VIBRA_AVAILABLE = 0,







    S3E_VIBRA_ENABLED = 1,





    S3E_VIBRA_THRESHOLD = 2
} s3eVibraProperty;
# 69 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVibra.h"
typedef enum s3eVibraError
{
    S3E_VIBRA_ERR_NONE = 0,
    S3E_VIBRA_ERR_PARAM = 1,
    S3E_VIBRA_ERR_UNAVAIL = 5,
    S3E_VIBRA_ERR_DEVICE = 6,
    S3E_VIBRA_ERR_DISABLED = 1000
} s3eVibraError;
# 91 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVibra.h"
extern "C" int32 s3eVibraGetInt(s3eVibraProperty property);
# 109 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVibra.h"
extern "C" s3eResult s3eVibraSetInt(s3eVibraProperty property, int32 value);
# 122 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVibra.h"
extern "C" s3eVibraError s3eVibraGetError();
# 135 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVibra.h"
extern "C" const char* s3eVibraGetErrorString();
# 151 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVibra.h"
extern "C" s3eResult s3eVibraVibrate(uint8 level, uint32 ms);






extern "C" void s3eVibraStop();
# 41 "../../../../../../../dev/sdk/5.0/s3e/h/s3e.h" 2
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h" 1
# 49 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h"
typedef enum s3eVideoCodec
{







    S3E_VIDEO_CODEC_MPEG4 = 1,
# 67 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h"
    S3E_VIDEO_CODEC_3GPP = 2,





    S3E_VIDEO_CODEC_JPEG = 3,
# 82 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h"
    S3E_VIDEO_CODEC_3GPP_VIDEO_H263 = 4,
# 91 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h"
    S3E_VIDEO_CODEC_3GPP_VIDEO_H264 = 5,
# 100 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h"
    S3E_VIDEO_CODEC_3GPP_AUDIO_AMR = 6,







    S3E_VIDEO_CODEC_3GPP_AUDIO_AAC = 7,
# 117 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h"
    S3E_VIDEO_CODEC_MPEG4_VIDEO_MPEG4 = 8,
# 126 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h"
    S3E_VIDEO_CODEC_MPEG4_VIDEO_H264 = 9,







    S3E_VIDEO_CODEC_MPEG4_AUDIO_AAC = 10,






    S3E_VIDEO_CODEC_SWF = 11
} s3eVideoCodec;






typedef enum s3eVideoStatus
{




    S3E_VIDEO_STOPPED = 0,




    S3E_VIDEO_PLAYING = 1,




    S3E_VIDEO_PAUSED = 2,






    S3E_VIDEO_FAILED = 3
} s3eVideoStatus;
# 182 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h"
typedef enum s3eVideoProperty
{





    S3E_VIDEO_VOLUME = 0,





    S3E_VIDEO_STATUS = 1,





    S3E_VIDEO_POSITION = 2,
# 214 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h"
    S3E_VIDEO_VOLUME_DEFAULT = 3,


    S3E_VIDEO_AVAILABLE = 5

} s3eVideoProperty;
# 234 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h"
extern "C" int32 s3eVideoGetInt(s3eVideoProperty property);
# 252 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h"
extern "C" s3eResult s3eVideoSetInt(s3eVideoProperty property, int32 value);
# 262 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h"
typedef enum s3eVideoCallback
{
# 277 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h"
    S3E_VIDEO_STOP = 2,

    S3E_VIDEO_CALLBACK_MAX
} s3eVideoCallback;
# 302 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h"
extern "C" s3eResult s3eVideoRegister(s3eVideoCallback cbid, s3eCallback fn, void* userData);
# 318 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h"
extern "C" s3eResult s3eVideoUnRegister(s3eVideoCallback cbid, s3eCallback fn);
# 327 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h"
typedef enum s3eVideoError
{
    S3E_VIDEO_ERR_NONE = 0,
    S3E_VIDEO_ERR_PARAM = 1,
    S3E_VIDEO_ERR_TOO_MANY = 2,
    S3E_VIDEO_ERR_ALREADY_REG = 3,
    S3E_VIDEO_ERR_NOT_FOUND = 4,
    S3E_VIDEO_ERR_UNAVAIL = 5,
    S3E_VIDEO_ERR_DEVICE = 6,
    S3E_VIDEO_ERR_UNSUPPORTED = 7,
    S3E_VIDEO_ERR_MEM = 8,
    S3E_VIDEO_ERR_INVALID_DRIVE = 10,
    S3E_VIDEO_ERR_INVALID_PATH = 11,
    S3E_VIDEO_ERR_FILEFORMAT = 1000,
    S3E_VIDEO_ERR_WRONG_STATE = 1001
} s3eVideoError;
# 355 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h"
extern "C" s3eVideoError s3eVideoGetError();
# 369 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h"
extern "C" const char* s3eVideoGetErrorString();
# 460 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h"
extern "C" s3eResult s3eVideoPlay(const char* filename, uint32 repeatCount, int32 x, int32 y, int32 width, int32 height);
# 534 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h"
extern "C" s3eResult s3eVideoPlayFromBuffer(void* data, uint32 len, uint32 repeatCount, int32 x, int32 y, int32 width, int32 height);
# 560 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h"
extern "C" s3eResult s3eVideoPause();
# 581 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h"
extern "C" s3eResult s3eVideoResume();
# 598 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h"
extern "C" void s3eVideoStop();
# 610 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h"
extern "C" s3eBool s3eVideoIsPlaying();
# 634 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h"
extern "C" s3eBool s3eVideoIsCodecSupported(s3eVideoCodec codec);






# 1 "../../../../../../../dev/sdk/5.0/s3e/h/legacy/s3eVideo_legacy.h" 1
# 642 "../../../../../../../dev/sdk/5.0/s3e/h/s3eVideo.h" 2
# 42 "../../../../../../../dev/sdk/5.0/s3e/h/s3e.h" 2
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eGL.h" 1
# 38 "../../../../../../../dev/sdk/5.0/s3e/h/s3eGL.h"
typedef enum s3eGLError
{
    S3E_GL_ERR_NONE = 0,
    S3E_GL_ERR_PARAM = 1,
    S3E_GL_ERR_TOO_MANY = 2,
    S3E_GL_ERR_ALREADY_REG = 3,
    S3E_GL_ERR_NOT_FOUND = 4,
    S3E_GL_ERR_UNAVAIL = 5,
} s3eGLError;






typedef enum s3eGLProperty
{





    S3E_GL_VERSION = 0,





    S3E_EGL_VERSION = 1,






    S3E_GL_MUST_SUSPEND = 2,

} s3eGLProperty;
# 89 "../../../../../../../dev/sdk/5.0/s3e/h/s3eGL.h"
extern "C" int32 s3eGLGetInt(s3eGLProperty property);
# 99 "../../../../../../../dev/sdk/5.0/s3e/h/s3eGL.h"
typedef enum s3eGLCallback
{
# 112 "../../../../../../../dev/sdk/5.0/s3e/h/s3eGL.h"
    S3E_GL_SUSPEND = 0,
# 124 "../../../../../../../dev/sdk/5.0/s3e/h/s3eGL.h"
    S3E_GL_RESUME = 1,

    S3E_GL_CALLBACK_MAX
} s3eGLCallback;
# 154 "../../../../../../../dev/sdk/5.0/s3e/h/s3eGL.h"
extern "C" s3eResult s3eGLRegister(s3eGLCallback cbid, s3eCallback fn, void* userdata);
# 174 "../../../../../../../dev/sdk/5.0/s3e/h/s3eGL.h"
extern "C" s3eResult s3eGLUnRegister(s3eGLCallback cbid, s3eCallback fn);
# 188 "../../../../../../../dev/sdk/5.0/s3e/h/s3eGL.h"
extern "C" s3eGLError s3eGLGetError();
# 202 "../../../../../../../dev/sdk/5.0/s3e/h/s3eGL.h"
extern "C" const char* s3eGLGetErrorString();
# 214 "../../../../../../../dev/sdk/5.0/s3e/h/s3eGL.h"
extern "C" void* s3eGLGetNativeWindow();
# 43 "../../../../../../../dev/sdk/5.0/s3e/h/s3e.h" 2
# 14 "C:\\users\\rlezama\\desktop\\airplay\\tapjoyconnectairplaysampleproj\\s3etapjoy\\source\\android\\s3eTapjoy_platform.cpp" 2





# 1 "../../../../../../../dev/sdk/5.0/modules/iwcore/h/IwDebug.h" 1
# 16 "../../../../../../../dev/sdk/5.0/modules/iwcore/h/IwDebug.h"
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDebug.h" 1
# 17 "../../../../../../../dev/sdk/5.0/modules/iwcore/h/IwDebug.h" 2
# 1 "../../../../../../../dev/sdk/5.0/s3e/h/s3eDevice.h" 1
# 18 "../../../../../../../dev/sdk/5.0/modules/iwcore/h/IwDebug.h" 2
# 1 "../../../../../../../dev/sdk/5.0/modules/iwcore/h/IwCore.h" 1
# 19 "../../../../../../../dev/sdk/5.0/modules/iwcore/h/IwDebug.h" 2



# 1 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdio.h" 1
# 41 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdio.h"
# 1 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/sys/cdefs.h" 1
# 70 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/sys/cdefs.h"
# 1 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/sys/cdefs_elf.h" 1
# 71 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/sys/cdefs.h" 2
# 42 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdio.h" 2
# 1 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/sys/_types.h" 1
# 40 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/sys/_types.h"
# 1 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/machine/_types.h" 1
# 52 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/machine/_types.h"
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;

typedef long long __int64_t;

typedef unsigned long long __uint64_t;


typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;


typedef __int32_t __int_fast8_t;
typedef __uint32_t __uint_fast8_t;
typedef __int32_t __int_fast16_t;
typedef __uint32_t __uint_fast16_t;
typedef __int32_t __int_fast32_t;
typedef __uint32_t __uint_fast32_t;
typedef __int64_t __int_fast64_t;
typedef __uint64_t __uint_fast64_t;


typedef int __intptr_t;
typedef unsigned int __uintptr_t;


typedef __int64_t __intmax_t;
typedef __uint64_t __uintmax_t;


typedef __int32_t __register_t;


typedef unsigned long __vaddr_t;
typedef unsigned long __paddr_t;
typedef unsigned long __vsize_t;
typedef unsigned long __psize_t;


typedef int __clock_t;
typedef int __clockid_t;
typedef long __ptrdiff_t;
typedef int __time_t;
typedef int __timer_t;

typedef __builtin_va_list __va_list;
# 116 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/machine/_types.h"
typedef int __wint_t;
typedef int __rune_t;
typedef void * __wctrans_t;
typedef void * __wctype_t;
# 41 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/sys/_types.h" 2

typedef unsigned long __cpuid_t;
typedef __int32_t __dev_t;
typedef __uint32_t __fixpt_t;
typedef __uint32_t __gid_t;
typedef __uint32_t __id_t;
typedef __uint32_t __in_addr_t;
typedef __uint16_t __in_port_t;
typedef __uint32_t __ino_t;
typedef long __key_t;
typedef __uint32_t __mode_t;
typedef __uint32_t __nlink_t;
typedef __int32_t __pid_t;
typedef __uint64_t __rlim_t;
typedef __uint16_t __sa_family_t;
typedef __int32_t __segsz_t;
typedef __uint32_t __socklen_t;
typedef __int32_t __swblk_t;
typedef __uint32_t __uid_t;
typedef __uint32_t __useconds_t;
typedef __int32_t __suseconds_t;





typedef union {
 char __mbstate8[128];
 __int64_t __mbstateL;
} __mbstate_t;
# 43 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdio.h" 2







# 1 "c:\\dev\\sdk\\5.0\\platform_libs\\linux\\gcc\\bin\\../lib/gcc/arm-none-linux-gnueabi/4.4.1/include/stddef.h" 1 3 4
# 211 "c:\\dev\\sdk\\5.0\\platform_libs\\linux\\gcc\\bin\\../lib/gcc/arm-none-linux-gnueabi/4.4.1/include/stddef.h" 3 4
typedef unsigned int size_t;
# 51 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdio.h" 2

# 1 "c:\\dev\\sdk\\5.0\\platform_libs\\linux\\gcc\\bin\\../lib/gcc/arm-none-linux-gnueabi/4.4.1/include/stddef.h" 1 3 4
# 149 "c:\\dev\\sdk\\5.0\\platform_libs\\linux\\gcc\\bin\\../lib/gcc/arm-none-linux-gnueabi/4.4.1/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 53 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdio.h" 2


# 1 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/sys/types.h" 1
# 33 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/sys/types.h"
# 1 "c:\\dev\\sdk\\5.0\\platform_libs\\linux\\gcc\\bin\\../lib/gcc/arm-none-linux-gnueabi/4.4.1/include/stddef.h" 1 3 4
# 34 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/sys/types.h" 2
# 1 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdint.h" 1
# 31 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdint.h"
# 1 "c:\\dev\\sdk\\5.0\\platform_libs\\linux\\gcc\\bin\\../lib/gcc/arm-none-linux-gnueabi/4.4.1/include/stddef.h" 1 3 4
# 32 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdint.h" 2
# 53 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdint.h"
typedef __int8_t int8_t;
typedef __uint8_t uint8_t;
typedef __int16_t int16_t;
typedef __uint16_t uint16_t;
typedef __int32_t int32_t;
typedef __uint32_t uint32_t;

typedef __int64_t int64_t;
typedef __uint64_t uint64_t;






typedef int8_t int_least8_t;
typedef int8_t int_fast8_t;

typedef uint8_t uint_least8_t;
typedef uint8_t uint_fast8_t;
# 102 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdint.h"
typedef int16_t int_least16_t;
typedef int32_t int_fast16_t;

typedef uint16_t uint_least16_t;
typedef uint32_t uint_fast16_t;
# 135 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdint.h"
typedef int32_t int_least32_t;
typedef int32_t int_fast32_t;

typedef uint32_t uint_least32_t;
typedef uint32_t uint_fast32_t;
# 168 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdint.h"
typedef int64_t int_least64_t;
typedef int64_t int_fast64_t;

typedef uint64_t uint_least64_t;
typedef uint64_t uint_fast64_t;
# 211 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdint.h"
typedef int intptr_t;
typedef unsigned int uintptr_t;
# 230 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdint.h"
typedef uint64_t uintmax_t;
typedef int64_t intmax_t;
# 258 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdint.h"
typedef long int ssize_t;
# 35 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/sys/types.h" 2


# 1 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/linux/posix_types.h" 1
# 15 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/linux/posix_types.h"
# 1 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/linux/stddef.h" 1
# 15 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/linux/stddef.h"
# 1 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/linux/compiler.h" 1
# 16 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/linux/stddef.h" 2
# 16 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/linux/posix_types.h" 2
# 32 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/linux/posix_types.h"
typedef struct {
 unsigned long fds_bits [(1024/(8 * sizeof(unsigned long)))];
} __kernel_fd_set;

typedef void (*__kernel_sighandler_t)(int);

typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/asm/posix_types.h" 1
# 15 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/asm/posix_types.h"
typedef unsigned long __kernel_ino_t;
typedef unsigned short __kernel_mode_t;
typedef unsigned short __kernel_nlink_t;
typedef long __kernel_off_t;
typedef int __kernel_pid_t;
typedef unsigned short __kernel_ipc_pid_t;
typedef unsigned short __kernel_uid_t;
typedef unsigned short __kernel_gid_t;
typedef unsigned int __kernel_size_t;
typedef int __kernel_ssize_t;
typedef int __kernel_ptrdiff_t;
typedef long __kernel_time_t;
typedef long __kernel_suseconds_t;
typedef long __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef int __kernel_daddr_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;

typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;
typedef unsigned short __kernel_old_dev_t;


typedef long long __kernel_loff_t;


typedef struct {



 int __val[2];

} __kernel_fsid_t;
# 42 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/linux/posix_types.h" 2
# 38 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/sys/types.h" 2
# 1 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/asm/types.h" 1
# 17 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/asm/types.h"
typedef unsigned short umode_t;

typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


typedef __signed__ long long __s64;
typedef unsigned long long __u64;
# 39 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/sys/types.h" 2
# 1 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/linux/types.h" 1
# 21 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/linux/types.h"
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;

typedef __u64 __le64;
typedef __u64 __be64;


struct ustat {
 __kernel_daddr_t f_tfree;
 __kernel_ino_t f_tinode;
 char f_fname[6];
 char f_fpack[6];
};
# 40 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/sys/types.h" 2
# 1 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/machine/kernel.h" 1
# 34 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/machine/kernel.h"
typedef unsigned long __kernel_blkcnt_t;
typedef unsigned long __kernel_blksize_t;


typedef unsigned long __kernel_fsblkcnt_t;
typedef unsigned long __kernel_fsfilcnt_t;
typedef unsigned int __kernel_id_t;
# 41 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/sys/types.h" 2

typedef __u32 __kernel_dev_t;
# 52 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/sys/types.h"
typedef __kernel_blkcnt_t blkcnt_t;
typedef __kernel_blksize_t blksize_t;
typedef __kernel_clock_t clock_t;
typedef __kernel_clockid_t clockid_t;
typedef __kernel_dev_t dev_t;
typedef __kernel_fsblkcnt_t fsblkcnt_t;
typedef __kernel_fsfilcnt_t fsfilcnt_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_id_t id_t;
typedef __kernel_ino_t ino_t;
typedef __kernel_key_t key_t;
typedef __kernel_mode_t mode_t;
typedef __kernel_nlink_t nlink_t;

typedef __kernel_off_t off_t;
typedef __kernel_loff_t loff_t;
typedef loff_t off64_t;

typedef __kernel_pid_t pid_t;
# 97 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/sys/types.h"
typedef __kernel_suseconds_t suseconds_t;
typedef __kernel_time_t time_t;
typedef __kernel_uid32_t uid_t;
typedef signed long useconds_t;

typedef __kernel_daddr_t daddr_t;
typedef __kernel_timer_t timer_t;
typedef __kernel_mqd_t mqd_t;

typedef __kernel_caddr_t caddr_t;
typedef unsigned int uint_t;
typedef unsigned int uint;


# 1 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/sys/sysmacros.h" 1
# 36 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/sys/sysmacros.h"
static __inline__ int major(dev_t _dev)
{
  return (_dev >> 8) & 0xfff;
}

static __inline__ int minor(dev_t _dev)
{
  return (_dev & 0xff) | ((_dev >> 12) & 0xfff00);
}

static __inline__ dev_t makedev(int __ma, int __mi)
{
  return ((__ma & 0xfff) << 8) | (__mi & 0xff) | ((__mi & 0xfff00) << 12);
}
# 112 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/sys/types.h" 2


typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;

typedef uint32_t u_int32_t;
typedef uint16_t u_int16_t;
typedef uint8_t u_int8_t;
typedef uint64_t u_int64_t;
# 56 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdio.h" 2
# 78 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdio.h"
typedef off_t fpos_t;
# 87 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdio.h"
struct __sbuf {
 unsigned char *_base;
 int _size;
};
# 119 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdio.h"
typedef struct __sFILE {
 unsigned char *_p;
 int _r;
 int _w;
 short _flags;
 short _file;
 struct __sbuf _bf;
 int _lbfsize;


 void *_cookie;
 int (*_close)(void *);
 int (*_read)(void *, char *, int);
 fpos_t (*_seek)(void *, fpos_t, int);
 int (*_write)(void *, const char *, int);


 struct __sbuf _ext;

 unsigned char *_up;
 int _ur;


 unsigned char _ubuf[3];
 unsigned char _nbuf[1];


 struct __sbuf _lb;


 int _blksize;
 fpos_t _offset;
} FILE;

extern "C" {
extern FILE __sF[];
}
# 223 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdio.h"
extern "C" {
void clearerr(FILE *);
int fclose(FILE *);
int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
int fgetc(FILE *);
int fgetpos(FILE *, fpos_t *);
char *fgets(char *, int, FILE *);
FILE *fopen(const char *, const char *);
int fprintf(FILE *, const char *, ...);
int fputc(int, FILE *);
int fputs(const char *, FILE *);
size_t fread(void *, size_t, size_t, FILE *);
FILE *freopen(const char *, const char *, FILE *);
int fscanf(FILE *, const char *, ...);
int fseek(FILE *, long, int);
int fseeko(FILE *, off_t, int);
int fsetpos(FILE *, const fpos_t *);
long ftell(FILE *);
off_t ftello(FILE *);
size_t fwrite(const void *, size_t, size_t, FILE *);
int getc(FILE *);
int getchar(void);
char *gets(char *);



extern int sys_nerr;
extern char *sys_errlist[];

void perror(const char *);
int printf(const char *, ...);
int putc(int, FILE *);
int putchar(int);
int puts(const char *);
int remove(const char *);
int rename(const char *, const char *);
void rewind(FILE *);
int scanf(const char *, ...);
void setbuf(FILE *, char *);
int setvbuf(FILE *, char *, int, size_t);
int sprintf(char *, const char *, ...);
int sscanf(const char *, const char *, ...);
FILE *tmpfile(void);
char *tmpnam(char *);
int ungetc(int, FILE *);
int vfprintf(FILE *, const char *, __va_list);
int vprintf(const char *, __va_list);
int vsprintf(char *, const char *, __va_list);


int snprintf(char *, size_t, const char *, ...)
  __attribute__((__format__ (printf, 3, 4)))
  __attribute__((__nonnull__ (3)));
int vfscanf(FILE *, const char *, __va_list)
  __attribute__((__format__ (scanf, 2, 0)))
  __attribute__((__nonnull__ (2)));
int vscanf(const char *, __va_list)
  __attribute__((__format__ (scanf, 1, 0)))
  __attribute__((__nonnull__ (1)));
int vsnprintf(char *, size_t, const char *, __va_list)
  __attribute__((__format__ (printf, 3, 0)))
  __attribute__((__nonnull__ (3)));
int vsscanf(const char *, const char *, __va_list)
  __attribute__((__format__ (scanf, 2, 0)))
  __attribute__((__nonnull__ (2)));


}
# 302 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdio.h"
extern "C" {
char *ctermid(char *);
char *cuserid(char *);
FILE *fdopen(int, const char *);
int fileno(FILE *);


int pclose(FILE *);
FILE *popen(const char *, const char *);
# 331 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdio.h"
}







extern "C" {
int asprintf(char **, const char *, ...)
  __attribute__((__format__ (printf, 2, 3)))
  __attribute__((__nonnull__ (2)));
char *fgetln(FILE *, size_t *);
int fpurge(FILE *);
int getw(FILE *);
int putw(int, FILE *);
void setbuffer(FILE *, char *, int);
int setlinebuf(FILE *);
int vasprintf(char **, const char *, __va_list)
  __attribute__((__format__ (printf, 2, 0)))
  __attribute__((__nonnull__ (2)));
}




extern "C" {
FILE *funopen(const void *,
  int (*)(void *, char *, int),
  int (*)(void *, const char *, int),
  fpos_t (*)(void *, fpos_t, int),
  int (*)(void *));
}







extern "C" {
int __srget(FILE *);
int __swbuf(int, FILE *);
}







static inline int __sputc(int _c, FILE *_p) {
 if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
  return (*_p->_p++ = _c);
 else
  return (__swbuf(_c, _p));
}
# 447 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdio.h"
int fdprintf(int, const char*, ...);
int vfdprintf(int, const char*, __va_list);
# 23 "../../../../../../../dev/sdk/5.0/modules/iwcore/h/IwDebug.h" 2
# 1 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdlib.h" 1
# 37 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdlib.h"
# 1 "c:\\dev\\sdk\\5.0\\platform_libs\\linux\\gcc\\bin\\../lib/gcc/arm-none-linux-gnueabi/4.4.1/include/stddef.h" 1 3 4
# 38 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdlib.h" 2

# 1 "c:\\dev\\sdk\\5.0\\platform_libs\\linux\\gcc\\bin\\../lib/gcc/arm-none-linux-gnueabi/4.4.1/include/stddef.h" 1 3 4
# 40 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdlib.h" 2
# 1 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/string.h" 1
# 32 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/string.h"
# 1 "c:\\dev\\sdk\\5.0\\platform_libs\\linux\\gcc\\bin\\../lib/gcc/arm-none-linux-gnueabi/4.4.1/include/stddef.h" 1 3 4
# 33 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/string.h" 2
# 1 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/malloc.h" 1
# 32 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/malloc.h"
# 1 "c:\\dev\\sdk\\5.0\\platform_libs\\linux\\gcc\\bin\\../lib/gcc/arm-none-linux-gnueabi/4.4.1/include/stddef.h" 1 3 4
# 33 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/malloc.h" 2

extern "C" {

extern __attribute__((malloc)) void* malloc(size_t);
extern __attribute__((malloc)) void* calloc(size_t, size_t);
extern __attribute__((malloc)) void* realloc(void *, size_t);
extern void free(void *);

extern void* memalign(size_t alignment, size_t bytesize);
extern void* valloc(size_t bytesize);
extern void* pvalloc(size_t bytesize);
extern int mallopt(int param_number, int param_value);
extern size_t malloc_footprint(void);
extern size_t malloc_max_footprint(void);

struct mallinfo {
    size_t arena;
    size_t ordblks;
    size_t smblks;
    size_t hblks;
    size_t hblkhd;
    size_t usmblks;
    size_t fsmblks;
    size_t uordblks;
    size_t fordblks;
    size_t keepcost;
};

extern struct mallinfo mallinfo(void);
# 78 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/malloc.h"
extern size_t malloc_usable_size(void* block);
# 99 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/malloc.h"
extern void malloc_stats(void);

}
# 34 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/string.h" 2

extern "C" {

extern void* memccpy(void *, const void *, int, size_t);
extern void* memchr(const void *, int, size_t);
extern void* memrchr(const void *, int, size_t);
extern int memcmp(const void *, const void *, size_t);
extern void* memcpy(void *, const void *, size_t);
extern void* memmove(void *, const void *, size_t);
extern void* memset(void *, int, size_t);
extern void* memmem(const void *, size_t, const void *, size_t);
extern void memswap(void *, void *, size_t);

extern char* index(const char *, int);
extern char* rindex(const char *, int);
extern char* strchr(const char *, int);
extern char* strrchr(const char *, int);

extern size_t strlen(const char *);
extern int strcmp(const char *, const char *);
extern char* strcpy(char *, const char *);
extern char* strcat(char *, const char *);

extern int strcasecmp(const char *, const char *);
extern int strncasecmp(const char *, const char *, size_t);
extern char* strdup(const char *);

extern char* strstr(const char *, const char *);
extern char* strcasestr(const char *haystack, const char *needle);
extern char* strtok(char *, const char *);
extern char* strtok_r(char *, const char *, char**);

extern char* strerror(int);
extern int strerror_r(int errnum, char *buf, size_t n);

extern size_t strnlen(const char *, size_t);
extern char* strncat(char *, const char *, size_t);
extern char* strndup(const char *, size_t);
extern int strncmp(const char *, const char *, size_t);
extern char* strncpy(char *, const char *, size_t);

extern size_t strlcat(char *, const char *, size_t);
extern size_t strlcpy(char *, const char *, size_t);

extern size_t strcspn(const char *, const char *);
extern char* strpbrk(const char *, const char *);
extern char* strsep(char **, const char *);
extern size_t strspn(const char *, const char *);

extern char* strsignal(int sig);

extern int strcoll(const char *, const char *);
extern size_t strxfrm(char *, const char *, size_t);

}
# 41 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdlib.h" 2
# 1 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/alloca.h" 1
# 42 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdlib.h" 2
# 1 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/strings.h" 1
# 45 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/strings.h"
extern "C" {
int bcmp(const void *, const void *, size_t);
void bcopy(const void *, void *, size_t);
void bzero(void *, size_t);
int ffs(int);
char *index(const char *, int);
char *rindex(const char *, int);
int strcasecmp(const char *, const char *);
int strncasecmp(const char *, const char *, size_t);
}
# 43 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdlib.h" 2
# 1 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/memory.h" 1
# 44 "../../../../../../../dev/sdk/5.0/platform_libs/android/arch-arm/usr/include/stdlib.h" 2

extern "C" {




extern __attribute__((__noreturn__)) void exit(int);
extern __attribute__((__noreturn__)) void abort(void);
extern int atexit(void (*)(void));
extern int on_exit(void (*)(int, void *), void *);

extern char *getenv(const char *);
extern int putenv(const char *);
extern int setenv(const char *, const char *, int);
extern int unsetenv(const char *);
extern int clearenv(void);

extern char *mktemp (char *);
extern int mkstemp (char *);

extern long strtol(const char *, char **, int);
extern long long strtoll(const char *, char **, int);
extern unsigned long strtoul(const char *, char **, int);
extern unsigned long long strtoull(const char *, char **, int);
extern double strtod(const char *nptr, char **endptr);

static __inline__ float strtof(const char *nptr, char **endptr)
{
    return (float)strtod(nptr, endptr);
}

extern int atoi(const char *);
extern long atol(const char *);
extern long long atoll(const char *);

static __inline__ double atof(const char *nptr)
{
    return (strtod(nptr, __null));
}

static __inline__ int abs(int __n) {
    return (__n < 0) ? -__n : __n;
}

static __inline__ long labs(long __n) {
    return (__n < 0L) ? -__n : __n;
}

static __inline__ long long llabs(long long __n) {
    return (__n < 0LL) ? -__n : __n;
}

extern char * realpath(const char *path, char *resolved);
extern int system(const char * string);

extern void * bsearch(const void *key, const void *base0,
 size_t nmemb, size_t size,
 int (*compar)(const void *, const void *));

extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));

extern long jrand48(unsigned short *);
extern long mrand48(void);
extern long nrand48(unsigned short *);
extern long lrand48(void);
extern unsigned short *seed48(unsigned short*);
extern void srand48(long);
extern unsigned int arc4random(void);
extern void arc4random_stir(void);
extern void arc4random_addrandom(unsigned char *, int);


static __inline__ int rand(void) {
    return (int)lrand48();
}
static __inline__ void srand(unsigned int __s) {
    srand48(__s);
}
static __inline__ long random(void)
{
    return lrand48();
}
static __inline__ void srandom(unsigned int __s)
{
    srand48(__s);
}



extern int unlockpt(int);
extern char* ptsname(int);
extern int ptsname_r(int, char*, size_t);
extern int getpt(void);

static __inline__ int grantpt(int __fd)
{
  (void)__fd;
  return 0;
}

typedef struct {
    int quot;
    int rem;
} div_t;

extern div_t div(int, int);

typedef struct {
    long int quot;
    long int rem;
} ldiv_t;

extern ldiv_t ldiv(long, long);

typedef struct {
    long long int quot;
    long long int rem;
} lldiv_t;

extern lldiv_t lldiv(long long, long long);


extern int mblen(const char *, size_t);
extern size_t mbstowcs(wchar_t *, const char *, size_t);
extern int mbtowc(wchar_t *, const char *, size_t);


extern int wctomb(char *, wchar_t);
extern size_t wcstombs(char *, const wchar_t *, size_t);


}
# 24 "../../../../../../../dev/sdk/5.0/modules/iwcore/h/IwDebug.h" 2
# 51 "../../../../../../../dev/sdk/5.0/modules/iwcore/h/IwDebug.h"
typedef void(*IwAssertTextCallback)(char* pBuffer);

extern "C" {

typedef s3eErrorShowResult(*IwAssertCallback)(const char* channel, const char* pExpr, const char* pFilename, int32 line, const char* message);
typedef s3eErrorShowResult(*IwErrorCallback)(const char* message);
# 65 "../../../../../../../dev/sdk/5.0/modules/iwcore/h/IwDebug.h"
 s3eBool IwDebugTraceIsChannelOn(const char* channel, s3eBool default_on);
# 91 "../../../../../../../dev/sdk/5.0/modules/iwcore/h/IwDebug.h"
 s3eBool IwDebugTraceChannelSwitch(const char* channel, s3eBool new_state);
# 101 "../../../../../../../dev/sdk/5.0/modules/iwcore/h/IwDebug.h"
 void IwDebugTraceLinePrintf(const char* fmt, ...)

__attribute__((format(printf, 1, 2)))

;






 void IwDebugTraceLineVPrintf(const char* fmt, va_list args);


 void IwDebugAssertSetUID(uint32 n);







 s3eBool IwDebugAssertIsChannelOn(const char* channel);







 void IwDebugClearConfigCache();
# 141 "../../../../../../../dev/sdk/5.0/modules/iwcore/h/IwDebug.h"
 void IwDebugAssertSetMessage(const char* fmt, ...)

__attribute__((format(printf, 1, 2)))

;
# 168 "../../../../../../../dev/sdk/5.0/modules/iwcore/h/IwDebug.h"
 s3eErrorShowResult IwDebugAssertShow(const char* pExpr, const char* pFilename, int32 line, uint8 ignorable);






 IwAssertTextCallback IwAssertRegisterTextCallback(IwAssertTextCallback fn);






 IwAssertCallback IwAssertRegisterCallback(IwAssertCallback fn);
# 192 "../../../../../../../dev/sdk/5.0/modules/iwcore/h/IwDebug.h"
 s3eErrorShowResult IwDebugErrorShow(const char* Args, ...)

__attribute__((format(printf, 1, 2)))

;






 IwErrorCallback IwDebugErrorRegisterCallback(IwErrorCallback fn);

}
# 20 "C:\\users\\rlezama\\desktop\\airplay\\tapjoyconnectairplaysampleproj\\s3etapjoy\\source\\android\\s3eTapjoy_platform.cpp" 2
# 32 "C:\\users\\rlezama\\desktop\\airplay\\tapjoyconnectairplaysampleproj\\s3etapjoy\\source\\android\\s3eTapjoy_platform.cpp"
static void GetTapPointsCallback(JNIEnv *env, jobject _this, int points);
static void SpendTapPointsCallback(JNIEnv *env, jobject _this, int points);
static void AwardTapPointsCallback(JNIEnv *env, jobject _this, int points);
static void FeaturedAppCallback(JNIEnv *env, jobject _this, jobject featuredAppObject);

static jobject g_Obj;
static jmethodID g_s3eTapjoyRegister;
static jmethodID g_s3eTapjoyUnRegister;


static jmethodID g_TapjoyRequestConnect;
static jmethodID g_TapjoyActionComplete;
static jmethodID g_TapjoySetUserID;
static jmethodID g_TapjoyShowOffers;
static jmethodID g_TapjoyShowOffersWithCurrenyID;
static jmethodID g_TapjoyGetTapPoints;
static jmethodID g_TapjoySpendTapPoints;
static jmethodID g_TapjoyAwardTapPoints;


static jmethodID g_TapjoyShowVirtualGoods;
static jmethodID g_TapjoyGetPurchasedItem;
static jmethodID g_TapjoyGetAvailableItem;

static jmethodID g_TapjoyGetFeaturedApp;
static jmethodID g_TapjoyShowFeaturedAppFullScreenAd;
static jmethodID g_TapjoySetFeaturedAppDisplayCount;


static jmethodID g_TapjoySetTransitionEffect;
static jmethodID g_TapjoySetOffersNavBarImage;
static jmethodID g_TapjoySetUserDefinedColor;

static jmethodID g_TapjoyGetDisplayAd;
static jmethodID g_TapjoySetDisplayAdView;

s3eResult s3eTapjoyInit_platform()
{
 ((void)0);


    JNIEnv* env = s3eEdkJNIGetEnv();
    jobject obj = __null;
    jmethodID cons = __null;


    jclass cls = s3eEdkAndroidFindClass("s3eTapjoy");
    if (!cls)
        goto fail;


    cons = env->GetMethodID(cls, "<init>", "()V");
    if (!cons)
        goto fail;


    obj = env->NewObject(cls, cons);
    if (!obj)
        goto fail;


    g_s3eTapjoyRegister = env->GetMethodID(cls, "s3eTapjoyRegister", "()I");
    if (!g_s3eTapjoyRegister)
        goto fail;

    g_s3eTapjoyUnRegister = env->GetMethodID(cls, "s3eTapjoyUnRegister", "()I");
    if (!g_s3eTapjoyUnRegister)
        goto fail;
# 109 "C:\\users\\rlezama\\desktop\\airplay\\tapjoyconnectairplaysampleproj\\s3etapjoy\\source\\android\\s3eTapjoy_platform.cpp"
    g_TapjoyRequestConnect = env->GetMethodID(cls, "TapjoyRequestConnect", "(Ljava/lang/String;Ljava/lang/String;)I");
    if (!g_TapjoyRequestConnect)
        goto fail;

    g_TapjoyActionComplete = env->GetMethodID(cls, "TapjoyActionComplete", "(Ljava/lang/String;)I");
    if (!g_TapjoyActionComplete)
        goto fail;

    g_TapjoySetUserID = env->GetMethodID(cls, "TapjoySetUserID", "(Ljava/lang/String;)I");
    if (!g_TapjoySetUserID)
        goto fail;

    g_TapjoyShowOffers = env->GetMethodID(cls, "TapjoyShowOffers", "()I");
    if (!g_TapjoyShowOffers)
        goto fail;

    g_TapjoyShowOffersWithCurrenyID = env->GetMethodID(cls, "TapjoyShowOffersWithCurrenyID", "(Ljava/lang/String;Z)I");
    if (!g_TapjoyShowOffersWithCurrenyID)
        goto fail;

    g_TapjoyGetTapPoints = env->GetMethodID(cls, "TapjoyGetTapPoints", "()I");
    if (!g_TapjoyGetTapPoints)
        goto fail;

    g_TapjoySpendTapPoints = env->GetMethodID(cls, "TapjoySpendTapPoints", "(I)I");
    if (!g_TapjoySpendTapPoints)
        goto fail;

    g_TapjoyAwardTapPoints = env->GetMethodID(cls, "TapjoyAwardTapPoints", "(I)I");
    if (!g_TapjoyAwardTapPoints)
        goto fail;

    g_TapjoyShowVirtualGoods = env->GetMethodID(cls, "TapjoyShowVirtualGoods", "()I");
    if (!g_TapjoyShowVirtualGoods)
        goto fail;

    g_TapjoyGetPurchasedItem = env->GetMethodID(cls, "TapjoyGetPurchasedItem", "(I)V");
    if (!g_TapjoyGetPurchasedItem)
        goto fail;

    g_TapjoyGetAvailableItem = env->GetMethodID(cls, "TapjoyGetAvailableItem", "(I)V");
    if (!g_TapjoyGetAvailableItem)
        goto fail;

    g_TapjoyGetFeaturedApp = env->GetMethodID(cls, "TapjoyGetFeaturedApp", "()I");
    if (!g_TapjoyGetFeaturedApp)
        goto fail;

    g_TapjoyShowFeaturedAppFullScreenAd = env->GetMethodID(cls, "TapjoyShowFeaturedAppFullScreenAd", "()I");
    if (!g_TapjoyShowFeaturedAppFullScreenAd)
        goto fail;

    g_TapjoySetFeaturedAppDisplayCount = env->GetMethodID(cls, "TapjoySetFeaturedAppDisplayCount", "(I)I");
    if (!g_TapjoySetFeaturedAppDisplayCount)
        goto fail;

    g_TapjoySetTransitionEffect = env->GetMethodID(cls, "TapjoySetTransitionEffect", "(I)I");
    if (!g_TapjoySetTransitionEffect)
        goto fail;

    g_TapjoySetOffersNavBarImage = env->GetMethodID(cls, "TapjoySetOffersNavBarImage", "(Ljava/lang/String;)I");
    if (!g_TapjoySetOffersNavBarImage)
        goto fail;

    g_TapjoySetUserDefinedColor = env->GetMethodID(cls, "TapjoySetUserDefinedColor", "(I)I");
    if (!g_TapjoySetUserDefinedColor)
        goto fail;

    g_TapjoyGetDisplayAd = env->GetMethodID(cls, "TapjoyGetDisplayAd", "(Ljava/lang/String;Z)I");
    if (!g_TapjoyGetDisplayAd)
        goto fail;

    g_TapjoySetDisplayAdView = env->GetMethodID(cls, "TapjoySetDisplayAdView", "(IIII)I");
    if (!g_TapjoySetDisplayAdView)
        goto fail;

fail:

 const JNINativeMethod nativeMethodDefs[] =
 {
        {"GetTapPointsCallback", "(I)V", (void *)&GetTapPointsCallback},
        {"SpendTapPointsCallback", "(I)V", (void *)&SpendTapPointsCallback},
        {"AwardTapPointsCallback", "(I)V", (void *)&AwardTapPointsCallback},
  {"FeaturedAppCallback", "(Ljava/lang/Object;)V", (void *)&FeaturedAppCallback},
 };

 env->RegisterNatives(cls, nativeMethodDefs, sizeof(nativeMethodDefs)/sizeof(nativeMethodDefs[0]));


    jthrowable exc = env->ExceptionOccurred();
    if (exc)
    {
        env->ExceptionDescribe();
        env->ExceptionClear();
        ((void)0);
        return S3E_RESULT_ERROR;
    }

    ((void)0);
    g_Obj = env->NewGlobalRef(obj);
    env->DeleteLocalRef(obj);
    env->DeleteLocalRef(cls);


    return S3E_RESULT_SUCCESS;
}

void s3eTapjoyTerminate_platform()
{

}

s3eResult s3eTapjoyRegister_platform(s3eTapjoyCallback cbid, s3eCallback fn, void* userData)
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    return (s3eResult)env->CallIntMethod(g_Obj, g_s3eTapjoyRegister);
}

s3eResult s3eTapjoyUnRegister_platform(s3eTapjoyCallback cbid, s3eCallback fn)
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    return (s3eResult)env->CallIntMethod(g_Obj, g_s3eTapjoyUnRegister);
}

s3eResult TapjoyRequestConnect_platform(const char* appID, const char* secretKey)
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    jstring appID_jstr = env->NewStringUTF(appID);
    jstring secretKey_jstr = env->NewStringUTF(secretKey);
    return (s3eResult)env->CallIntMethod(g_Obj, g_TapjoyRequestConnect, appID_jstr, secretKey_jstr);
}

s3eResult TapjoyActionComplete_platform(const char* actionID)
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    jstring actionID_jstr = env->NewStringUTF(actionID);
    return (s3eResult)env->CallIntMethod(g_Obj, g_TapjoyActionComplete, actionID_jstr);
}

s3eResult TapjoySetUserID_platform(const char* userID)
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    jstring userID_jstr = env->NewStringUTF(userID);
    return (s3eResult)env->CallIntMethod(g_Obj, g_TapjoySetUserID, userID_jstr);
}

s3eResult TapjoyShowOffers_platform()
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    return (s3eResult)env->CallIntMethod(g_Obj, g_TapjoyShowOffers);
}

s3eResult TapjoyShowOffersWithCurrenyID_platform(const char* currencyID, s3eBool enableCurrencySelector)
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    jstring currencyID_jstr = env->NewStringUTF(currencyID);
    return (s3eResult)env->CallIntMethod(g_Obj, g_TapjoyShowOffersWithCurrenyID, currencyID_jstr, enableCurrencySelector);
}

s3eResult TapjoyGetTapPoints_platform(TapjoyGetTapPointsCallbackFn callbackFn, void* userData)
{
    JNIEnv* env = s3eEdkJNIGetEnv();


    s3eEdkCallbacksRegister(0xcb8b9d07, S3E_TAPJOY_CALLBACK_MAX, S3E_TAPJOY_CALLBACK_GET_TAP_POINTS, (s3eCallback)callbackFn, __null, false);

    return (s3eResult)env->CallIntMethod(g_Obj, g_TapjoyGetTapPoints);
}

s3eResult TapjoySpendTapPoints_platform(int amount, TapjoySpendTapPointsCallbackFn callbackFn, void* userData)
{
    JNIEnv* env = s3eEdkJNIGetEnv();


    s3eEdkCallbacksRegister(0xcb8b9d07, S3E_TAPJOY_CALLBACK_MAX, S3E_TAPJOY_CALLBACK_SPEND_TAP_POINTS, (s3eCallback)callbackFn, __null, false);

    return (s3eResult)env->CallIntMethod(g_Obj, g_TapjoySpendTapPoints, amount);
}

s3eResult TapjoyAwardTapPoints_platform(int amount, TapjoyAwardTapPointsCallbackFn callbackFn, void* userData)
{
    JNIEnv* env = s3eEdkJNIGetEnv();


    s3eEdkCallbacksRegister(0xcb8b9d07, S3E_TAPJOY_CALLBACK_MAX, S3E_TAPJOY_CALLBACK_AWARD_TAP_POINTS, (s3eCallback)callbackFn, __null, false);

    return (s3eResult)env->CallIntMethod(g_Obj, g_TapjoyAwardTapPoints, amount);
}

s3eResult TapjoyShowVirtualGoods_platform()
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    return (s3eResult)env->CallIntMethod(g_Obj, g_TapjoyShowVirtualGoods);
}

TapjoyVGStoreItem* TapjoyGetPurchasedItem_platform(int index)
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    env->CallVoidMethod(g_Obj, g_TapjoyGetPurchasedItem, index);
    return __null;
}

TapjoyVGStoreItem* TapjoyGetAvailableItem_platform(int index)
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    env->CallVoidMethod(g_Obj, g_TapjoyGetAvailableItem, index);
    return __null;
}

s3eResult TapjoyGetFeaturedApp_platform(TapjoyGetFeaturedAppCallbackFn callbackFn, void* userData)
{
    JNIEnv* env = s3eEdkJNIGetEnv();


    s3eEdkCallbacksRegister(0xcb8b9d07, S3E_TAPJOY_CALLBACK_MAX, S3E_TAPJOY_CALLBACK_GET_FEATURED_APP, (s3eCallback)callbackFn, __null, false);

    return (s3eResult)env->CallIntMethod(g_Obj, g_TapjoyGetFeaturedApp);
}

s3eResult TapjoyShowFeaturedAppFullScreenAd_platform()
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    return (s3eResult)env->CallIntMethod(g_Obj, g_TapjoyShowFeaturedAppFullScreenAd);
}

s3eResult TapjoySetFeaturedAppDisplayCount_platform(int count)
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    return (s3eResult)env->CallIntMethod(g_Obj, g_TapjoySetFeaturedAppDisplayCount, count);
}

s3eResult TapjoySetTransitionEffect_platform(int transition)
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    return (s3eResult)env->CallIntMethod(g_Obj, g_TapjoySetTransitionEffect, transition);
}

s3eResult TapjoySetOffersNavBarImage_platform(const char* pPNGFilename)
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    jstring pPNGFilename_jstr = env->NewStringUTF(pPNGFilename);
    return (s3eResult)env->CallIntMethod(g_Obj, g_TapjoySetOffersNavBarImage, pPNGFilename_jstr);
}

s3eResult TapjoySetUserDefinedColor_platform(int your_color_in_0xAAARRGGBB_format)
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    return (s3eResult)env->CallIntMethod(g_Obj, g_TapjoySetUserDefinedColor, your_color_in_0xAAARRGGBB_format);
}

s3eResult TapjoyGetDisplayAd_platform(const char* adContentSize, s3eBool shouldRefreshAd, TapjoyGetDisplayAdCallbackFn callbackFn, void* userData)
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    jstring adContentSize_jstr = env->NewStringUTF(adContentSize);
    return (s3eResult)env->CallIntMethod(g_Obj, g_TapjoyGetDisplayAd, adContentSize_jstr, shouldRefreshAd);
}

s3eResult TapjoySetDisplayAdView_platform(int left, int top, int width, int height)
{
    JNIEnv* env = s3eEdkJNIGetEnv();
    return (s3eResult)env->CallIntMethod(g_Obj, g_TapjoySetDisplayAdView, left, top, width, height);
}


void GetTapPointsCallback(JNIEnv *env, jobject _this, int points)
{
 TapjoyGetTapPointsResult result;
 result.m_PointTotal = points;

 s3eEdkCallbacksEnqueue(0xcb8b9d07,
       S3E_TAPJOY_CALLBACK_GET_TAP_POINTS,
       &result,
       sizeof(result),
       __null,
       (1));
}

void SpendTapPointsCallback(JNIEnv *env, jobject _this, int points)
{
 TapjoySpendTapPointsResult result;
 result.m_PointTotal = points;

 s3eEdkCallbacksEnqueue(0xcb8b9d07,
       S3E_TAPJOY_CALLBACK_SPEND_TAP_POINTS,
       &result,
       sizeof(result),
       __null,
       (1));
}

void AwardTapPointsCallback(JNIEnv *env, jobject _this, int points)
{
 TapjoyAwardTapPointsResult result;
 result.m_PointTotal = points;

 s3eEdkCallbacksEnqueue(0xcb8b9d07,
       S3E_TAPJOY_CALLBACK_AWARD_TAP_POINTS,
       &result,
       sizeof(result),
       __null,
       (1));
}

void FeaturedAppCallback(JNIEnv *env, jobject _this, jobject featuredAppObject)
{
 TapjoyFeaturedAppObject result;

 s3eEdkCallbacksEnqueue(0xcb8b9d07,
       S3E_TAPJOY_CALLBACK_GET_FEATURED_APP,
       &result,
       sizeof(result),
       __null,
       (1));
}
